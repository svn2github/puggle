/*
 * TinyResultsPanel.java
 *
 * Created on 22 December 2007, 2:07
 */

package puggle.ui;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.Query;
import puggle.LexicalAnalyzer.FileHandler;
import puggle.LexicalAnalyzer.FileHandlerException;

/**
 *
 * @author  gvasil
 */
public class TinyResultsPanel extends ResultsPanel {
    
    /** Creates new form TinyResultsPanel */
    public TinyResultsPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        resultPanel1 = new puggle.ui.TinyResultPanel();
        resultPanel2 = new puggle.ui.TinyResultPanel();
        resultPanel3 = new puggle.ui.TinyResultPanel();
        resultPanel4 = new puggle.ui.TinyResultPanel();
        resultPanel5 = new puggle.ui.TinyResultPanel();
        resultPanel6 = new puggle.ui.TinyResultPanel();
        resultPanel7 = new puggle.ui.TinyResultPanel();
        resultPanel8 = new puggle.ui.TinyResultPanel();
        resultPanel9 = new puggle.ui.TinyResultPanel();
        resultPanel10 = new puggle.ui.TinyResultPanel();

        setLayout(new java.awt.GridLayout(10, 1, 0, 1));

        add(resultPanel1);

        add(resultPanel2);

        add(resultPanel3);

        add(resultPanel4);

        add(resultPanel5);

        add(resultPanel6);

        add(resultPanel7);

        add(resultPanel8);

        add(resultPanel9);

        add(resultPanel10);

    }// </editor-fold>//GEN-END:initComponents
    
    private void printCurrentHits() {
        Document doc;
        Icon icon;
        sun.awt.shell.ShellFolder sf;
        String title = null, path = null, folder = null;
        long size;
        int score;
        
        try {
            if (this.currHits < this.totalHits) {
                printHit(this.hits.doc(currHits),
                        (int)Math.ceil(this.hits.score(currHits) * 10) / 2,
                        resultPanel1);
            } else {
                clearResultPanel(resultPanel1);
            }
            
            if (this.currHits + 1 < this.totalHits) {
                printHit(this.hits.doc(currHits + 1),
                        (int)Math.ceil(this.hits.score(currHits + 1) * 10) / 2,
                        resultPanel2);
            } else {
                clearResultPanel(resultPanel2);
            }

            if (currHits + 2 < totalHits) {
                printHit(this.hits.doc(currHits + 2),
                        (int)Math.ceil(this.hits.score(currHits + 2) * 10) / 2,
                        resultPanel3);
            } else {
                clearResultPanel(resultPanel3);
            }
            
            if (currHits + 3 < totalHits) {
                printHit(this.hits.doc(currHits + 3),
                        (int)Math.ceil(this.hits.score(currHits + 3) * 10) / 2,
                        resultPanel4);
            } else {
                clearResultPanel(resultPanel4);
            }
            
            if (currHits + 4 < totalHits) {
                printHit(this.hits.doc(currHits + 4),
                        (int)Math.ceil(this.hits.score(currHits + 4) * 10) / 2,
                        resultPanel5);
            } else {
                clearResultPanel(resultPanel5);
            }
            
            if (currHits + 5 < totalHits) {
                printHit(this.hits.doc(currHits + 5),
                        (int)Math.ceil(this.hits.score(currHits + 5) * 10) / 2,
                        resultPanel6);
            } else {
                clearResultPanel(resultPanel6);
            }
            
            if (currHits + 6 < totalHits) {
                printHit(this.hits.doc(currHits + 6),
                        (int)Math.ceil(this.hits.score(currHits + 6) * 10) / 2,
                        resultPanel7);
            } else {
                clearResultPanel(resultPanel7);
            }
                
            if (currHits + 7 < totalHits) {
                printHit(this.hits.doc(currHits + 7),
                        (int)Math.ceil(this.hits.score(currHits + 7) * 10) / 2,
                        resultPanel8);
            } else {
                clearResultPanel(resultPanel8);
            }
            
            if (currHits + 8 < totalHits) {
                printHit(this.hits.doc(currHits + 8),
                        (int)Math.ceil(this.hits.score(currHits + 8) * 10) / 2,
                        resultPanel9);
            } else {
                clearResultPanel(resultPanel9);
            }
            
            if (currHits + 9 < totalHits) {
                printHit(this.hits.doc(currHits + 9),
                        (int)Math.ceil(this.hits.score(currHits + 9) * 10) / 2,
                        resultPanel10);
            } else {
                clearResultPanel(resultPanel10);
            }

//            JScrollBar bar = this.scrollPane.getVerticalScrollBar();
//            bar.setValue(bar.getMinimum());
            
            //pack();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    private void printHit(Document doc, int score, TinyResultPanel resultPanel) {
        String title = doc.get("title");
        String path = doc.get("path");
        long size = Long.parseLong(doc.get("size"));
        if (title == null || title.trim().compareTo("") == 0) {
            title = path.substring(path.lastIndexOf(File.separatorChar) + 1);
        }
        resultPanel.setTitle(title);
        resultPanel.getTitleLabel().setToolTipText(path);
        String folder = path.substring(0, path.lastIndexOf(File.separatorChar) + 1);
        resultPanel.setPath(folder);
        resultPanel.getPathLabel().setToolTipText(folder);
    }
    
    public void clearResultPanel(TinyResultPanel resultPanel) {
        resultPanel.setTitle(""); resultPanel.getTitleLabel().setToolTipText("");
        resultPanel.setPath("");
        resultPanel.getPathLabel().setToolTipText("");
    }
    

    
    public void setResults(Query query, Hits hits) {
        this.hits = hits;
        this.query = query;
        this.currHits = 0;
        this.totalHits = hits.length();
        this.printCurrentHits();
    }
    
    public int getCurrentResultsNumber() {
        return (this.currHits);
    }
    
    public int getTotalResultsNumber() {
        return (this.totalHits);
    }
    
    public boolean hasPreviousResults() {
        return (this.currHits - 10 >= 0);
    }
    
    public boolean hasNextResults() {
        return (this.currHits + 10 < this.totalHits);
    }
    
    public boolean nextResults() {
        if (this.hasNextResults()) {
            this.currHits += 10;
            this.printCurrentHits();
            return true;
        }
        return false;
    }
    
    public boolean previousResults() {
        if (this.hasPreviousResults()) {
            this.currHits -= 10;
            this.printCurrentHits();
            return true;
        }
        return false;
    }
    
    private ImageControl imageControl;
    private Hits hits;
    private Query query;
    
    private int currHits;
    private int totalHits;

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private puggle.ui.TinyResultPanel resultPanel1;
    private puggle.ui.TinyResultPanel resultPanel10;
    private puggle.ui.TinyResultPanel resultPanel2;
    private puggle.ui.TinyResultPanel resultPanel3;
    private puggle.ui.TinyResultPanel resultPanel4;
    private puggle.ui.TinyResultPanel resultPanel5;
    private puggle.ui.TinyResultPanel resultPanel6;
    private puggle.ui.TinyResultPanel resultPanel7;
    private puggle.ui.TinyResultPanel resultPanel8;
    private puggle.ui.TinyResultPanel resultPanel9;
    // End of variables declaration//GEN-END:variables
    
}
