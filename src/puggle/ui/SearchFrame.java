/*
 * SearchFrame.java
 *
 * Created on 5 September 2006, 8:22
 */

package puggle.ui;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import puggle.Indexer.Indexer;
import puggle.QueryEvaluator.Searcher;
import puggle.Indexer.IndexProperties;
import puggle.Resources.Resources;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JScrollBar;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.Query;
import puggle.Util.Updater;
import puggle.Util.Util;

/**
 *
 * @author  gvasil
 */
public class SearchFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form SearchFrame
     */
    public SearchFrame() {

        /* initialize tray icon */
        try {
            this.trayIconControl = new TrayIconControl(this);
        } catch(UnsupportedOperationException ex) {
            this.trayIconControl = null;
            System.err.println(ex.getMessage());
        }
        
        initComponents();
        
        this.init();

        // XXX is this really needed?
        /* if portable edition, remove open index menu */
        if (Resources.isPortableEdition() == true) {
            this.fileMenu.remove(this.openMenuItem);
        }
        
        if (new Date().getTime() - this.indexerProperties.getLastIndexed() > INDEX_DT) {
            this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-important.png")));
            this.lastIndexedLabel.setToolTipText("Index is outdated or incomplete. Please start indexer.");
            // force indexer to start
            this.startButtonActionPerformed(null);
        }
        else {
            this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-green.png")));
            this.lastIndexedLabel.setToolTipText("Indexing has been completed successfully.");
        }
        
        /* idiot patch to initialize classic panel */
        this.resultsPanel = new ClassicResultsPanel();
        this.scrollPane.setViewportView(this.resultsPanel);
    }
    
    private void init() {
        this.indexDir = new File(Resources.getIndexCanonicalPath());
        
        this.indexerProperties = new IndexProperties(
                new File(Resources.getApplicationPropertiesCanonicalPath()));
        
        this.indexerTextArea.setText("Last full index was at: "
                +this.indexerProperties.getLastIndexedString());
        
        this.imageControl = ImageControl.getImageControl();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewButtonGroup = new javax.swing.ButtonGroup();
        scrollPane = new javax.swing.JScrollPane();
        resultsPanel = new puggle.ui.ResultsPanel();
        searchPanel = new javax.swing.JPanel();
        searchChoice = new java.awt.Choice();
        findButton = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        bottomPanel = new javax.swing.JPanel();
        navigationPanel = new java.awt.Panel();
        resultsLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        indexerPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        indexerProgressBar = new javax.swing.JProgressBar();
        indexerScrollPane = new javax.swing.JScrollPane();
        indexerTextArea = new javax.swing.JTextArea();
        propertiesButton = new javax.swing.JButton();
        lastIndexedLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        openMenuItem = new javax.swing.JMenuItem();
        openPortableMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        classicCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        tinyCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        listCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        indexerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        updateMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(Resources.APP_NAME + " " +
            ((Resources.isPortableEdition() == true) ?
                "Portable " : "Desktop ")
            + "Search v"
            + Resources.APP_VERSION);
        setBackground(new java.awt.Color(241, 240, 240));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit()
            .getImage(getClass().
                getResource("/puggle.png")));
        setName("frame"); // NOI18N
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeiconified(java.awt.event.WindowEvent evt) {
                formWindowDeiconified(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        org.jdesktop.layout.GroupLayout resultsPanelLayout = new org.jdesktop.layout.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1264, Short.MAX_VALUE)
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 451, Short.MAX_VALUE)
        );

        scrollPane.setViewportView(resultsPanel);

        searchPanel.setBackground(new java.awt.Color(234, 233, 234));

        searchChoice.setFont(new java.awt.Font("Dialog", 0, 13));
        searchChoice.addItem("All");
        searchChoice.addItem("Music");
        searchChoice.addItem("Pictures");
        searchChoice.addItem("Documents");

        findButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        findButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon-search.png"))); // NOI18N
        findButton.setText("Find");
        findButton.setToolTipText("Find");
        findButton.setFocusable(false);
        findButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findButtonMouseClicked(evt);
            }
        });

        searchLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        searchLabel.setText("Search Items :");

        searchField.setFont(new java.awt.Font("Dialog", 0, 13));
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFieldKeyTyped(evt);
            }
        });

        org.jdesktop.layout.GroupLayout searchPanelLayout = new org.jdesktop.layout.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(searchLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchChoice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(findButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(searchPanelLayout.createSequentialGroup()
                .add(searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(searchPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(findButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(searchPanelLayout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(searchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(searchChoice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(searchLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(searchField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.Y_AXIS));

        navigationPanel.setBackground(new java.awt.Color(234, 233, 234));

        resultsLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        resultsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        nextButton.setFont(new java.awt.Font("Tahoma", 0, 12));
        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/right-arrow.png"))); // NOI18N
        nextButton.setText("Next Results");
        nextButton.setEnabled(false);
        nextButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextButtonMouseClicked(evt);
            }
        });

        prevButton.setFont(new java.awt.Font("Tahoma", 0, 12));
        prevButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/left-arrow.png"))); // NOI18N
        prevButton.setText("Previous Results");
        prevButton.setEnabled(false);
        prevButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prevButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout navigationPanelLayout = new org.jdesktop.layout.GroupLayout(navigationPanel);
        navigationPanel.setLayout(navigationPanelLayout);
        navigationPanelLayout.setHorizontalGroup(
            navigationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(navigationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(resultsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 335, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(prevButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nextButton)
                .addContainerGap())
        );
        navigationPanelLayout.setVerticalGroup(
            navigationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultsLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, navigationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(navigationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(prevButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        bottomPanel.add(navigationPanel);

        indexerPanel.setBackground(new java.awt.Color(234, 233, 234));
        indexerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        indexerPanel.setFont(new java.awt.Font("Verdana", 0, 11));

        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media-play.png"))); // NOI18N
        startButton.setToolTipText("Start indexing documents");
        startButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        startButton.setBorderPainted(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media-stop.png"))); // NOI18N
        stopButton.setToolTipText("Stop indexing");
        stopButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        stopButton.setBorderPainted(false);
        stopButton.setEnabled(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        indexerProgressBar.setToolTipText("Indexing progress");

        indexerScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        indexerScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        indexerTextArea.setColumns(20);
        indexerTextArea.setEditable(false);
        indexerTextArea.setRows(5);
        indexerTextArea.setToolTipText("");
        indexerTextArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        indexerScrollPane.setViewportView(indexerTextArea);

        propertiesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/preferences.png"))); // NOI18N
        propertiesButton.setToolTipText("Set indexing properties");
        propertiesButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        propertiesButton.setBorderPainted(false);
        propertiesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        propertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesButtonActionPerformed(evt);
            }
        });

        lastIndexedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-important.png"))); // NOI18N
        lastIndexedLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        org.jdesktop.layout.GroupLayout indexerPanelLayout = new org.jdesktop.layout.GroupLayout(indexerPanel);
        indexerPanel.setLayout(indexerPanelLayout);
        indexerPanelLayout.setHorizontalGroup(
            indexerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(indexerPanelLayout.createSequentialGroup()
                .add(lastIndexedLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(startButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(stopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(propertiesButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(indexerScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(indexerProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        indexerPanelLayout.setVerticalGroup(
            indexerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(indexerPanelLayout.createSequentialGroup()
                .add(indexerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(propertiesButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .add(stopButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .add(startButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .add(lastIndexedLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .add(indexerScrollPane, 0, 0, Short.MAX_VALUE)
                    .add(indexerProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        bottomPanel.add(indexerPanel);

        fileMenu.setText("File");
        fileMenu.add(jSeparator3);

        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/16x16/fileopen.png"))); // NOI18N
        openMenuItem.setText("Open Index...");
        openMenuItem.setFocusable(true);
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        openPortableMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/16x16/fileopen.png"))); // NOI18N
        openPortableMenuItem.setText("Open Portable Device Index...");
        openPortableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPortableMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openPortableMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/16x16/exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");

        viewButtonGroup.add(classicCheckBoxMenuItem);
        classicCheckBoxMenuItem.setSelected(true);
        classicCheckBoxMenuItem.setText("Classic");
        classicCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classicCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(classicCheckBoxMenuItem);

        viewButtonGroup.add(tinyCheckBoxMenuItem);
        tinyCheckBoxMenuItem.setText("Small Icons");
        tinyCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tinyCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(tinyCheckBoxMenuItem);

        viewButtonGroup.add(listCheckBoxMenuItem);
        listCheckBoxMenuItem.setText("List");
        listCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(listCheckBoxMenuItem);
        viewMenu.add(jSeparator2);

        indexerCheckBoxMenuItem.setSelected(true);
        indexerCheckBoxMenuItem.setText("Indexer Toolbar");
        indexerCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                indexerCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        viewMenu.add(indexerCheckBoxMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setText("Help");

        helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/16x16/help.png"))); // NOI18N
        helpMenuItem.setText("Help Contents");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpContentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);
        helpMenu.add(jSeparator5);

        updateMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/16x16/update.png"))); // NOI18N
        updateMenuItem.setText("Check for Updates...");
        updateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(updateMenuItem);
        helpMenu.add(jSeparator4);

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/16x16/about.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(searchPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
            .add(bottomPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(searchPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .add(0, 0, 0)
                .add(bottomPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesButtonActionPerformed
        IndexPropertiesDialog dialog = new IndexPropertiesDialog((java.awt.Frame)null, true);
        dialog.setProperties(this.indexerProperties);
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_propertiesButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        this.stopIndexing();
        this.stopButton.setEnabled(false);
        
        if (new Date().getTime() - this.indexerProperties.getLastIndexed() > INDEX_DT) {
            this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-important.png")));
            this.lastIndexedLabel.setToolTipText("Index is outdated or incomplete. Please start indexer.");
        }
        else {
            this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-green.png")));
            this.lastIndexedLabel.setToolTipText("Indexing has been completed successfully.");
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try {
            boolean status = this.startIndexing(25);
            if (status == true) {
                this.startButton.setEnabled(false);
                this.propertiesButton.setEnabled(false);
                this.stopButton.setEnabled(true);
                this.openMenuItem.setEnabled(false);
                this.openPortableMenuItem.setEnabled(false);
                System.out.println("Puggle Indexer: " +
                        "Starting indexing documents...");
                
                this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-green.png")));
                this.lastIndexedLabel.setToolTipText("Indexing in progess...");
                
                Thread t = new Thread(
                        new Runnable() {
                    public void run() {
                        try {
                            indexerThread.join();
                            indexer.optimize();
                            indexer.close();
                            indexerThread = null;
                            indexer = null;
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                        
                        stopButton.setEnabled(false);
                        startButton.setEnabled(true);
                        propertiesButton.setEnabled(true);
                        openMenuItem.setEnabled(true);
                        openPortableMenuItem.setEnabled(true);

                        if (new Date().getTime() - indexerProperties.getLastIndexed() > INDEX_DT) {
                            lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-important.png")));
                            lastIndexedLabel.setToolTipText("Index is outdated or incomplete. Please start indexer.");
                        }
                        else {
                            lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-green.png")));
                            lastIndexedLabel.setToolTipText("Indexing has been completed successfully.");
                        }
                    }
                });
                t.start();
                
            }
        } catch (IOException ex) {
            int opt = JOptionPane.showConfirmDialog(this, "Force unlock?",
                    ex.getMessage(), JOptionPane.YES_NO_OPTION);

            if (opt == JOptionPane.YES_OPTION) {
                try {
                    Indexer indexer_l = new Indexer(indexDir, this.indexerProperties, true);
                    indexer_l.close(); indexer_l = null;
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(),
                            "Unspecified error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Index successfully unlocked",
                        "Report", JOptionPane.INFORMATION_MESSAGE);
                this.startButtonActionPerformed(evt);
            } else if (opt == JOptionPane.NO_OPTION) {
                return;
            }
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutPanel panel = new AboutPanel();
        
        JDialog dialog = new JDialog(this, "About", true);

        dialog.setIconImage(
                Toolkit.getDefaultToolkit()
                .getImage(getClass().
                getResource("/help-about.png")));
        
        dialog.getContentPane().add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setResizable(false);
        dialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void tinyCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tinyCheckBoxMenuItemActionPerformed
        this.resultsPanel = new TinyResultsPanel();

        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        if (!searchField.getText().equals("")) {
            this.performSearch();
        }
        else {
            this.scrollPane.setViewportView(this.resultsPanel);
        }

        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_tinyCheckBoxMenuItemActionPerformed

    private void classicCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classicCheckBoxMenuItemActionPerformed
        this.resultsPanel = new ClassicResultsPanel();

        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        if (!searchField.getText().equals("")) {
            this.performSearch();
        }
        else {
            this.scrollPane.setViewportView(this.resultsPanel);
        }

        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_classicCheckBoxMenuItemActionPerformed

    private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyTyped
        this.resultsLabel.setText("");
        
        if (evt.getKeyChar() == '\n' && !searchField.getText().equals("")) {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            this.performSearch();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_searchFieldKeyTyped

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
    }//GEN-LAST:event_formWindowLostFocus

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        //this.stopButtonActionPerformed(null);
    }//GEN-LAST:event_formWindowGainedFocus
   
    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified

    }//GEN-LAST:event_formWindowIconified

    private void formWindowDeiconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeiconified
    }//GEN-LAST:event_formWindowDeiconified

    private void nextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseClicked
        if (this.nextButton.isEnabled() == false) {
            return;
        }
        
        int button = evt.getButton();
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        if (button == java.awt.event.MouseEvent.BUTTON1) {
            prevButton.setEnabled(true);
            if (this.resultsPanel.hasNextResults()) {
                this.resultsPanel.nextResults();
                
                JScrollBar bar = this.scrollPane.getVerticalScrollBar();
                bar.setValue(bar.getMinimum());
                
                this.updateResultsLabel();
            
                if (this.resultsPanel.hasNextResults() == false) {
                    this.nextButton.setEnabled(false);
                }
            }
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_nextButtonMouseClicked

    private void prevButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevButtonMouseClicked
        if (this.prevButton.isEnabled() == false) {
            return;
        }
        
        int button = evt.getButton();
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        if (button == java.awt.event.MouseEvent.BUTTON1) {
            nextButton.setEnabled(true);

            this.resultsPanel.previousResults();
            
            JScrollBar bar = this.scrollPane.getVerticalScrollBar();
            bar.setValue(bar.getMinimum());
            
            this.updateResultsLabel();
            
            if (this.resultsPanel.hasPreviousResults() == false) {
                this.prevButton.setEnabled(false);
            }
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_prevButtonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (this.trayIconControl != null) {
            this.trayIconControl.add();
            this.trayIconControl.setToolTip("Puggle Search");
        }

        //this.startButtonActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void findButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findButtonMouseClicked
        int button = evt.getButton();
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        if (button == java.awt.event.MouseEvent.BUTTON1
                && !searchField.getText().equals("")) {
            this.performSearch();
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_findButtonMouseClicked

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        int opt = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to exit?", "Exit",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                this.imageControl.getQuestionIcon());

        if (opt == JOptionPane.YES_OPTION) {
            if (this.indexerThread != null) {
                this.dispose();
                this.indexer.close();
            }

            System.exit(0);
        }
}//GEN-LAST:event_exitMenuItemActionPerformed

    private void openPortableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPortableMenuItemActionPerformed
        String os = System.getProperty("os.name").toLowerCase();
        if (os.indexOf("windows") > 0) {
            JOptionPane.showMessageDialog(this,
                    "Sorry, indexing of portable devices is currenly supported\n"
                    +"only in MS Windows operating systems.",
                    "Invalid operation",
                    JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        }

        File[] roots = File.listRoots();

        boolean error = true;
        while (error == true) {
            error = false;

            File root = (File)JOptionPane.showInputDialog(this,
                    "Drive letter:", "Select device", JOptionPane.QUESTION_MESSAGE,
                    this.imageControl.getQuestionIcon(), roots, new JComboBox());

            if (root != null) {
                File file = new File(root.getPath() + ".puggle");

                boolean exists = Indexer.indexExists(file);
                String directory = file.getPath();

                if (exists == true) {
                    try {
                        Resources.setIndex(file);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    this.init();

                    JOptionPane.showMessageDialog(this,
                            "Index directory '" +directory +"' successfully loaded.",
                            "Open Index Directory",
                            JOptionPane.INFORMATION_MESSAGE,
                            this.imageControl.getInfoIcon());

                    javax.swing.JMenuItem item = new javax.swing.JMenuItem(directory);
                    item.setFocusable(true);
                    item.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            String directory = evt.getActionCommand();
                            File file = new File(directory);
                            boolean exists = Indexer.indexExists(file);

                            if (exists == true) {
                                try {
                                    Resources.setIndex(file);
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                                init();
                            } else {
                                JOptionPane.showMessageDialog(null,
                                        "Directory '" +directory +"' is not a valid index.",
                                        "Error Opening Index Directory",
                                        JOptionPane.ERROR_MESSAGE,
                                        ImageControl.getImageControl().getErrorIcon());
                            }
                        }
                    });
                    //this.fileMenu.add(item);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Directory '" +directory +"' is not a valid index.",
                            "Error Opening Index Directory",
                            JOptionPane.ERROR_MESSAGE,
                            this.imageControl.getErrorIcon());
                    error = true;
                }

            } // if

        } // while
}//GEN-LAST:event_openPortableMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(new java.io.File(Resources.getApplicationDirectoryCanonicalPath()));
        fc.setDialogTitle("Select Index Directory");

        boolean error = true;
        while (error == true) {
            error = false;

            int returnVal = fc.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();

                /* check if root directory */
                if (file.getParent() == null) {
                    file = new File(file.getPath() + ".puggle");
                }

                boolean exists = Indexer.indexExists(file);
                String directory = file.getPath();

                if (exists == true) {
                    try {
                        Resources.setIndex(file);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    this.init();

                    JOptionPane.showMessageDialog(this,
                            "Index directory '" +directory +"' successfully loaded.",
                            "Open Index Directory",
                            JOptionPane.INFORMATION_MESSAGE,
                            this.imageControl.getInfoIcon());

                    javax.swing.JMenuItem item = new javax.swing.JMenuItem(directory);
                    item.setFocusable(true);
                    item.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            String directory = evt.getActionCommand();
                            File file = new File(directory);
                            boolean exists = Indexer.indexExists(file);

                            if (exists == true) {
                                try {
                                    Resources.setIndex(file);
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                                init();
                            } else {
                                JOptionPane.showMessageDialog(null,
                                        "Directory '" +directory +"' is not a valid index.",
                                        "Error Opening Index Directory",
                                        JOptionPane.ERROR_MESSAGE,
                                        ImageControl.getImageControl().getErrorIcon());
                            }
                        }
                    });
                    //this.fileMenu.add(item);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Directory '" +directory +"' is not a valid index.",
                            "Error Opening Index Directory",
                            JOptionPane.ERROR_MESSAGE,
                            this.imageControl.getErrorIcon());
                    error = true;
                }

            } // if

        } // while
}//GEN-LAST:event_openMenuItemActionPerformed

    private void indexerCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_indexerCheckBoxMenuItemItemStateChanged
        if (this.indexerCheckBoxMenuItem.isSelected() == true) {
            bottomPanel.add(this.indexerPanel);
        } else {
            bottomPanel.remove(this.indexerPanel);
        }
        this.bottomPanel.updateUI();
}//GEN-LAST:event_indexerCheckBoxMenuItemItemStateChanged

    private void helpContentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpContentsMenuItemActionPerformed
        JFrame helpFrame = new net.sourceforge.helpgui.gui.MainFrame("/help/","plastic");
        helpFrame.setTitle("Puggle Help");
        helpFrame.setIconImage(Toolkit.getDefaultToolkit()
            .getImage(getClass().
                getResource("/16x16/help.png")));
        helpFrame.setVisible(true);

    }//GEN-LAST:event_helpContentsMenuItemActionPerformed

    private void listCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listCheckBoxMenuItemActionPerformed
        this.resultsPanel = new ListResultsPanel();

        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        if (!searchField.getText().equals("")) {
            this.performSearch();
        }
        else {
            this.scrollPane.setViewportView(this.resultsPanel);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_listCheckBoxMenuItemActionPerformed

    private void updateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMenuItemActionPerformed
        String errorMessage = null;
        boolean updated = true;

        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        Updater update = new Updater();

        try {
            updated = update.isUpdated();
        } catch (UnknownHostException ex) {
            errorMessage = ex.getMessage();
        } catch (IOException ex) {
            errorMessage = ex.getMessage();
        } catch (Exception ex) {
            errorMessage = ex.getMessage();
        }

        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        if (errorMessage != null) {
            JOptionPane.showMessageDialog(this,
                    "<html>"
                    +"There were problems checking for, downloading or installing <br/>"
                    +"this update. Puggle could not be updated because:<br/><br/><b>"
                    +errorMessage + "</b><br/><br/>"
                    +"You can update Puggle manually by visiting this link and <br/>"
                    +"downloading the latest version:<p align=\"center\">"
                    +"<a href=\"" +Resources.getApplicationWebsite() +"\">"
                    +Resources.getApplicationWebsite()
                    +"</p></a><br/></html>",
                    "Update Error", JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        }

        if (updated == false) {
            JOptionPane.showMessageDialog(this,
                    "<html>"
                    +"The Puggle version that is currently running appears to be old. <br/><br/>"
                    +"You can update Puggle manually by visiting this link and <br/>"
                    +"downloading the latest version:<p align=\"center\">"
                    +"<a href=\"" +Resources.getApplicationWebsite() +"\">"
                    +Resources.getApplicationWebsite()
                    +"</p></a><br/></html>",
                    "Update found", JOptionPane.INFORMATION_MESSAGE,
                    this.imageControl.getUpdateIcon());
            return;

        }
        else {
            JOptionPane.showMessageDialog(this,
                    "There are no updates available.",
                    "No Updates Found", JOptionPane.INFORMATION_MESSAGE,
                    this.imageControl.getInfoIcon());
            return;
        }

    }//GEN-LAST:event_updateMenuItemActionPerformed

    private boolean startIndexing(long delay) throws IOException {
        
        if (this.indexerThread == null) {
            
            File[] dataDirsFile = this.indexerProperties.getDataDirectories();
            
            File indexDir_l = new File(Resources.getIndexCanonicalPath());
            
            JLogger logger = new JLogger(null, this.indexerTextArea);
            this.indexer = new Indexer(dataDirsFile, indexDir_l, this.indexerProperties, logger, false);
            this.indexer.setProgressBar(this.indexerProgressBar);
            this.indexer.setDelay(delay);
            
            this.indexerThread = new Thread(this.indexer);
            this.indexerThread.setPriority(Thread.MIN_PRIORITY);
            this.indexerThread.start();

            return true;
        }
        
        return false;
    }
    
    private void stopIndexing() {
        if (this.indexerThread != null) {
            this.indexer.stop();
        }
    }
    
    private void updateResultsLabel() {
        int currResults = this.resultsPanel.getCurrentResultsNumber();
        int totalResults = this.resultsPanel.getTotalResultsNumber();

        int resultsNumberPerFrame = this.resultsPanel.getResultsNumberPerFrame();
        
        if (this.resultsPanel.getTotalResultsNumber() > 0) {
            this.resultsLabel.setText(
                    "Results " +
                    (currResults + 1) +
                    "-" +
                    Math.min(totalResults, currResults + resultsNumberPerFrame) +
                    " of " +
                    totalResults
                    );
        } else {
            this.resultsLabel.setText("No Results");
        }
    }
    
    private void performSearch() {
        String q = searchField.getText();
        
        // Check if command
        if (q.length() >= 6 && q.substring(0, 6).equals("about:")) {
            String cmd = q.substring(6, q.length());
            
            System.out.println(cmd);
            
/*            if (cmd.equals("config")) {
                if (this.indexerPanel == null) {
                    this.indexerPanel = new IndexerPanel();
                }
                this.scrollPane.setViewportView(this.indexerPanel);
            }
            return;
 */
        }
        // /check if command
        
        this.scrollPane.setViewportView(this.resultsPanel);
        
        String choice = searchChoice.getSelectedItem();
        if (choice.equals("Music")) {
            q = Util.selectAllMusicFilesQuery() + " AND (" + q + ")";
        } else if (choice.equals("Pictures")) {
            q = Util.selectAllImagesQuery() + " AND (" + q + ")";
        } else if (choice.equals("Documents")) {
            q = Util.selectAllDocumentsQuery() + " AND (" + q + ")";
        }
        
        long start = new Date().getTime();
        try {
            query = Searcher.createQuery("content", q);
            this.hits = Searcher.search(this.indexDir, query);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "I/O Error", JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Parse Error", JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        }
        
        long end = new Date().getTime();
        
//        Thread t = new Thread(
//                new Runnable() {
//            public void run() {
                resultsPanel.setResults(query, hits, indexerProperties);

                prevButton.setEnabled(false);
                if (resultsPanel.hasNextResults()) {
                    nextButton.setEnabled(true);
                } else {
                    nextButton.setEnabled(false);
                }

                updateResultsLabel();

                JScrollBar bar = scrollPane.getVerticalScrollBar();
                bar.setValue(bar.getMinimum());
//            }
//        });
//        t.start();

        System.out.println("Found " + hits.length() +
                " document(s) (in " + (end - start) +
                " milliseconds) that matched query '" +
                q + "'."
        );
        
        if (this.indexerThread == null && ((new Date().getTime() - this.indexerProperties.getLastIndexed()) > INDEX_DT)) {
            this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-important.png")));
            this.lastIndexedLabel.setToolTipText("Index is outdated or incomplete. Please start indexer.");
        }
        else if (this.indexerThread != null && (this.indexerThread.isAlive())) {
            this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-green.png")));
            this.lastIndexedLabel.setToolTipText("Indexing in progress...");
        }
        else  {
            this.lastIndexedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alert-green.png")));
            this.lastIndexedLabel.setToolTipText("Indexing has been completed successfully.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchFrame().setVisible(true);
            }
        });
    }
    
    private File indexDir;
    private Hits hits;
    private Query query;
    
    private Indexer indexer;
    private Thread indexerThread;
    
    private IndexProperties indexerProperties;
    private ImageControl imageControl;
    private TrayIconControl trayIconControl;
    
    private final static int INDEX_DT = 86400000; // 24 hours
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JCheckBoxMenuItem classicCheckBoxMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton findButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JCheckBoxMenuItem indexerCheckBoxMenuItem;
    private javax.swing.JPanel indexerPanel;
    private javax.swing.JProgressBar indexerProgressBar;
    private javax.swing.JScrollPane indexerScrollPane;
    private javax.swing.JTextArea indexerTextArea;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JLabel lastIndexedLabel;
    private javax.swing.JCheckBoxMenuItem listCheckBoxMenuItem;
    private javax.swing.JMenuBar menuBar;
    private java.awt.Panel navigationPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem openPortableMenuItem;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton propertiesButton;
    private javax.swing.JLabel resultsLabel;
    private puggle.ui.ResultsPanel resultsPanel;
    private javax.swing.JScrollPane scrollPane;
    private java.awt.Choice searchChoice;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBoxMenuItem tinyCheckBoxMenuItem;
    private javax.swing.JMenuItem updateMenuItem;
    private javax.swing.ButtonGroup viewButtonGroup;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

}
