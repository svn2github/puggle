/*
 * SearchFrame.java
 *
 * Created on 5 September 2006, 8:22
 */

package puggle.ui;

import java.awt.Desktop;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.FileInputStream;
import java.text.DateFormat;
import java.util.Properties;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jpedal.io.JAIHelper;
import puggle.Indexer.Indexer;
import puggle.LexicalAnalyzer.FileHandler;
import puggle.LexicalAnalyzer.FileHandlerException;
import puggle.QueryEvaluator.Searcher;
import puggle.Indexer.IndexProperties;
import puggle.Resources.Resources;
import java.awt.Color;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledEditorKit;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.Query;

/**
 *
 * @author  gvasil
 */
public class SearchFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form SearchFrame
     */
    public SearchFrame() {

        /* initialize tray icon */
        try {
            this.trayIconControl = new TrayIconControl(this);
        } catch(UnsupportedOperationException ex) {
            this.trayIconControl = null;
            System.err.println(ex.getMessage());
        }
        
        this.init();

        /*
        long lastModified = this.indexerProperties.getLastIndexed();
        
        if (new Date().getTime() - lastModified > 86400000) {
            int opt = JOptionPane.showConfirmDialog(this,
                    "Index appears to be older than one day. (Last update was at "
                    + DateFormat.getDateInstance().format(lastModified)
                    +")\nUpdate now?",
                    "Update index",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    this.imageControl.getWarningIcon()
                    );
            
            if (opt == JOptionPane.YES_OPTION) {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new IndexerFrame().setVisible(true);
                    }
                });
            }
        }*/

        initComponents();
        
        /* idiot patch to initialize classic panel */
        this.resultsPanel = new ClassicResultsPanel();
        this.scrollPane.setViewportView(this.resultsPanel);
    }
    
    private void init() {
        this.indexDir = new File(Resources.getIndexCanonicalPath());
        this.indexerProperties = new IndexProperties(
                new File(Resources.getApplicationPropertiesCanonicalPath()));
        this.imageControl = ImageControl.getImageControl();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        viewButtonGroup = new javax.swing.ButtonGroup();
        bottomPanel = new java.awt.Panel();
        resultsLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        resultsPanel = new puggle.ui.ResultsPanel();
        jPanel1 = new javax.swing.JPanel();
        searchChoice = new java.awt.Choice();
        findButton = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        openPortableMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        viewMenu = new javax.swing.JMenu();
        classicCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        tinyCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(Resources.APP_NAME + " " + Resources.APP_VERSION);
        setBackground(new java.awt.Color(241, 240, 240));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("frame");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeiconified(java.awt.event.WindowEvent evt) {
                formWindowDeiconified(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        bottomPanel.setBackground(new java.awt.Color(234, 233, 234));
        resultsLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        resultsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        nextButton.setFont(new java.awt.Font("Tahoma", 0, 12));
        nextButton.setText("Next Results");
        nextButton.setEnabled(false);
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextButtonMouseClicked(evt);
            }
        });

        prevButton.setFont(new java.awt.Font("Tahoma", 0, 12));
        prevButton.setText("Previous Results");
        prevButton.setEnabled(false);
        prevButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prevButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout bottomPanelLayout = new org.jdesktop.layout.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(resultsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 335, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 119, Short.MAX_VALUE)
                .add(prevButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nextButton)
                .addContainerGap())
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultsLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .add(bottomPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(prevButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        org.jdesktop.layout.GroupLayout resultsPanelLayout = new org.jdesktop.layout.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 698, Short.MAX_VALUE)
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 439, Short.MAX_VALUE)
        );
        scrollPane.setViewportView(resultsPanel);

        jPanel1.setBackground(new java.awt.Color(234, 233, 234));
        searchChoice.setFont(new java.awt.Font("Dialog", 0, 13));
        searchChoice.addItem("All");
        searchChoice.addItem("Music");
        searchChoice.addItem("Pictures");
        searchChoice.addItem("Documents");

        findButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        findButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon-search.png")));
        findButton.setText("Find");
        findButton.setToolTipText("Find");
        findButton.setFocusable(false);
        findButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findButtonMouseClicked(evt);
            }
        });

        searchLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        searchLabel.setText("Search Items :");

        searchField.setFont(new java.awt.Font("Dialog", 0, 13));
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFieldKeyTyped(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(searchLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchChoice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(findButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(findButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(searchChoice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.BASELINE, searchLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(searchField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");
        openMenuItem.setText("Open Index...");
        openMenuItem.setFocusable(true);
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        openPortableMenuItem.setText("Open device Index...");
        openPortableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPortableMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openPortableMenuItem);

        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        fileMenu.add(jSeparator2);

        menuBar.add(fileMenu);

        viewMenu.setText("View");
        viewButtonGroup.add(classicCheckBoxMenuItem);
        classicCheckBoxMenuItem.setSelected(true);
        classicCheckBoxMenuItem.setText("Classic");
        classicCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classicCheckBoxMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(classicCheckBoxMenuItem);

        viewButtonGroup.add(tinyCheckBoxMenuItem);
        tinyCheckBoxMenuItem.setText("Tiny");
        tinyCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tinyCheckBoxMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(tinyCheckBoxMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setText("Help");
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, bottomPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                .add(1, 1, 1)
                .add(bottomPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openPortableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPortableMenuItemActionPerformed
        File[] roots = File.listRoots();

        boolean error = true;
        while (error == true) {
            error = false;
            
            File root = (File)JOptionPane.showInputDialog(this,
                    "Drive letter:", "Select device", JOptionPane.QUESTION_MESSAGE,
                    this.imageControl.getQuestionIcon(), roots, new JComboBox());
            
            if (root != null) {
                File file = new File(root.getPath() + ".puggle");

                boolean exists = Indexer.indexExists(file);
                String directory = file.getPath();
                
                if (exists == true) {
                    try {
                        Resources.setIndex(file);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    this.init();
                    
                    JOptionPane.showMessageDialog(this,
                            "Index directory '" +directory +"' successfully loaded.",
                            "Open Index Directory",
                            JOptionPane.INFORMATION_MESSAGE,
                            this.imageControl.getInfoIcon());
                    
                    javax.swing.JMenuItem item = new javax.swing.JMenuItem(directory);
                    item.setFocusable(true);
                    item.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            String directory = evt.getActionCommand();
                            File file = new File(directory);
                            boolean exists = Indexer.indexExists(file);

                            if (exists == true) {
                                try {
                                    Resources.setIndex(file);
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                                init();
                            }
                            else {
                                JOptionPane.showMessageDialog(null,
                                        "Directory '" +directory +"' is not a valid index.",
                                        "Error Opening Index Directory",
                                        JOptionPane.ERROR_MESSAGE,
                                        ImageControl.getImageControl().getErrorIcon());
                            }
                        }
                    });
                    this.fileMenu.add(item);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Directory '" +directory +"' is not a valid index.",
                            "Error Opening Index Directory",
                            JOptionPane.ERROR_MESSAGE,
                            this.imageControl.getErrorIcon());
                    error = true;
                }
                
            } // if
            
        } // while
    }//GEN-LAST:event_openPortableMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutPanel panel = new AboutPanel();
        
        JDialog dialog = new JDialog(this, "About", true);
        
        dialog.getContentPane().add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setResizable(false);
        dialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void tinyCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tinyCheckBoxMenuItemActionPerformed
        this.resultsPanel = new TinyResultsPanel();
        
        if (!searchField.getText().equals("")) {
            this.performSearch();
        }
        else {
            this.scrollPane.setViewportView(this.resultsPanel);
        }
    }//GEN-LAST:event_tinyCheckBoxMenuItemActionPerformed

    private void classicCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classicCheckBoxMenuItemActionPerformed
        this.resultsPanel = new ClassicResultsPanel();
        
        if (!searchField.getText().equals("")) {
            this.performSearch();
        }
        else {
            this.scrollPane.setViewportView(this.resultsPanel);
        }
    }//GEN-LAST:event_classicCheckBoxMenuItemActionPerformed

    private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyTyped
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));

        this.resultsLabel.setText("");
        
        if (evt.getKeyChar() == '\n' && !searchField.getText().equals("")) {
            this.performSearch();
        }
        
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_searchFieldKeyTyped

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        int opt = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to exit?", "Exit",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                this.imageControl.getQuestionIcon());
        
        if (opt == JOptionPane.YES_OPTION) {
            if (this.indexerThread != null) {
                this.dispose();                    
                this.indexer.close();
            }
            
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser fc = new JFileChooser();
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(new java.io.File(Resources.getApplicationDirectoryCanonicalPath()));
        fc.setDialogTitle("Select Index Directory");
        
        boolean error = true;
        while (error == true) {
            error = false;
            
            int returnVal = fc.showOpenDialog(this);
            
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();

                boolean exists = Indexer.indexExists(file);
                String directory = file.getPath();
                
                if (exists == true) {
                    try {
                        Resources.setIndex(file);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    this.init();
                    
                    JOptionPane.showMessageDialog(this,
                            "Index directory '" +directory +"' successfully loaded.",
                            "Open Index Directory",
                            JOptionPane.INFORMATION_MESSAGE,
                            this.imageControl.getInfoIcon());
                    
                    javax.swing.JMenuItem item = new javax.swing.JMenuItem(directory);
                    item.setFocusable(true);
                    item.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            String directory = evt.getActionCommand();
                            File file = new File(directory);
                            boolean exists = Indexer.indexExists(file);

                            if (exists == true) {
                                try {
                                    Resources.setIndex(file);
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                                init();
                            }
                            else {
                                JOptionPane.showMessageDialog(null,
                                        "Directory '" +directory +"' is not a valid index.",
                                        "Error Opening Index Directory",
                                        JOptionPane.ERROR_MESSAGE,
                                        ImageControl.getImageControl().getErrorIcon());
                            }
                        }
                    });
                    this.fileMenu.add(item);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Directory '" +directory +"' is not a valid index.",
                            "Error Opening Index Directory",
                            JOptionPane.ERROR_MESSAGE,
                            this.imageControl.getErrorIcon());
                    error = true;
                }
                
            } // if
            
        } // while
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        /*try {
            this.startIndexing(50);
        } catch (IOException ex) {
            // someone else is indexing. do nothing..
        }*/
    }//GEN-LAST:event_formWindowLostFocus

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        /*this.stopIndexing();*/
    }//GEN-LAST:event_formWindowGainedFocus
   
    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        if (this.trayIconControl != null) {
            this.trayIconControl.add();
        }

        try {
            boolean status = this.startIndexing(25);
            if (this.trayIconControl != null && status == true) {
                this.trayIconControl.displayMessage("Puggle Indexer",
                        "Indexing process started in background.",
                        TrayIcon.MessageType.INFO);
            }
        } catch (IOException ex) {
            // someone else is indexing.
            this.trayIconControl.displayMessage("Puggle Indexer",
                    "Indexing failed: " +ex.getMessage(),
                    TrayIcon.MessageType.ERROR);
            System.out.println(ex.getMessage());
            return;
        }
    }//GEN-LAST:event_formWindowIconified

    private void formWindowDeiconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeiconified
        this.stopIndexing();
    }//GEN-LAST:event_formWindowDeiconified

    private void nextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseClicked
        if (this.nextButton.isEnabled() == false) {
            return;
        }
        
        int button = evt.getButton();
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        if (button == java.awt.event.MouseEvent.BUTTON1) {
            prevButton.setEnabled(true);
            if (this.resultsPanel.hasNextResults()) {
                this.resultsPanel.nextResults();
                
                JScrollBar bar = this.scrollPane.getVerticalScrollBar();
                bar.setValue(bar.getMinimum());
                
                this.updateResultsLabel();
            
                if (this.resultsPanel.hasNextResults() == false) {
                    this.nextButton.setEnabled(false);
                }
            }
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_nextButtonMouseClicked

    private void prevButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevButtonMouseClicked
        if (this.prevButton.isEnabled() == false) {
            return;
        }
        
        int button = evt.getButton();
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        if (button == java.awt.event.MouseEvent.BUTTON1) {
            nextButton.setEnabled(true);

            this.resultsPanel.previousResults();
            
            JScrollBar bar = this.scrollPane.getVerticalScrollBar();
            bar.setValue(bar.getMinimum());
            
            this.updateResultsLabel();
            
            if (this.resultsPanel.hasPreviousResults() == false) {
                this.prevButton.setEnabled(false);
            }
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_prevButtonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (this.indexerThread != null) {
            this.dispose();                    
            this.indexer.close();
        }
        
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void findButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findButtonMouseClicked
        int button = evt.getButton();
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        if (button == java.awt.event.MouseEvent.BUTTON1
                && !searchField.getText().equals("")) {
            this.performSearch();
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_findButtonMouseClicked

    private boolean startIndexing(long delay) throws IOException {
        long lastModified = this.indexerProperties.getLastIndexed();
        
        if (this.indexerThread == null &&
                new Date().getTime() - lastModified > 600000 /* 10 mins */) {
            
            File[] dataDirsFile = this.indexerProperties.getDataDirectories();
            
            File indexDir = new File(Resources.getIndexCanonicalPath());
            
            JLogger logger = new JLogger(System.out);
            this.indexer = new Indexer(dataDirsFile, indexDir, this.indexerProperties, logger, false);
            this.indexer.setDelay(delay);  // Sleep about 1 sec for every 40 files.
            
            this.indexerThread = new Thread(this.indexer);
            this.indexerThread.start();
            
            return true;
        }
        
        return false;
    }
    
    private void stopIndexing() {
        if (this.indexerThread != null) {
            this.indexer.close();
            this.indexerThread = null;
        }
    }
    
    private void updateResultsLabel() {
        int currResults = this.resultsPanel.getCurrentResultsNumber();
        int totalResults = this.resultsPanel.getTotalResultsNumber();
        
        if (this.resultsPanel.getTotalResultsNumber() > 0) {
            this.resultsLabel.setText(
                    "Results " +
                    (currResults + 1) +
                    "-" +
                    Math.min(totalResults, currResults + 10) +
                    " of " +
                    totalResults
                    );
        } else {
            this.resultsLabel.setText("No Results");
        }
    }
    
    private void performSearch() {
        String q = searchField.getText();
        
        // Check if command
        if (q.length() >= 6 && q.substring(0, 6).equals("about:")) {
            String cmd = q.substring(6, q.length());
            
            System.out.println(cmd);
            
/*            if (cmd.equals("config")) {
                if (this.indexerPanel == null) {
                    this.indexerPanel = new IndexerPanel();
                }
                this.scrollPane.setViewportView(this.indexerPanel);
            }
            return;
 */
        }
        // /check if command
        
        this.scrollPane.setViewportView(this.resultsPanel);
        
        String choice = searchChoice.getSelectedItem();
        if (choice.equals("Music")) {
            q = Util.selectAllMusicFilesQuery() + " AND (" + q + ")";
        } else if (choice.equals("Pictures")) {
            q = Util.selectAllImagesQuery() + " AND (" + q + ")";
        } else if (choice.equals("Documents")) {
            q = Util.selectAllDocumentsQuery() + " AND (" + q + ")";
        }
        
        long start = new Date().getTime();
        try {
            query = Searcher.createQuery("content", q);
            this.hits = Searcher.search(this.indexDir, query);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "I/O Error", JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Parse Error", JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE,
                    this.imageControl.getErrorIcon());
            return;
        }
        
        long end = new Date().getTime();
        
        this.resultsPanel.setResults(this.query, this.hits, this.indexerProperties);
        
        JScrollBar bar = this.scrollPane.getVerticalScrollBar();
        bar.setValue(bar.getMinimum());
        
        prevButton.setEnabled(false);
        if (this.resultsPanel.hasNextResults()) {
            nextButton.setEnabled(true);
        } else {
            nextButton.setEnabled(false);
        }
        
        this.updateResultsLabel();

        System.out.println("Found " + hits.length() +
                " document(s) (in " + (end - start) +
                " milliseconds) that matched query '" +
                q + "'."
        );
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchFrame().setVisible(true);
            }
        });
    }
    
    private File indexDir;
    private Hits hits;
    private Query query;
    
    private Indexer indexer;
    private Thread indexerThread;
    
    private IndexProperties indexerProperties;
    private ImageControl imageControl;
    private TrayIconControl trayIconControl;
    
    private IndexerPanel indexerPanel;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private java.awt.Panel bottomPanel;
    private javax.swing.JCheckBoxMenuItem classicCheckBoxMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton findButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem openPortableMenuItem;
    private javax.swing.JButton prevButton;
    private javax.swing.JLabel resultsLabel;
    private puggle.ui.ResultsPanel resultsPanel;
    private javax.swing.JScrollPane scrollPane;
    private java.awt.Choice searchChoice;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JCheckBoxMenuItem tinyCheckBoxMenuItem;
    private javax.swing.ButtonGroup viewButtonGroup;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

}
