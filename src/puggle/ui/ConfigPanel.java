/*
 * ConfigPanel.java
 *
 * Created on 16 Μάρτιος 2007, 8:51 μμ
 */

package puggle.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import javax.swing.text.html.HTMLEditorKit;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.Query;
import org.apache.lucene.store.FSDirectory;
import puggle.Indexer.PropertiesControl;
import puggle.LexicalAnalyzer.FileHandler;
import puggle.LexicalAnalyzer.FileHandlerException;
import puggle.Resources.Resources;

/**
 *
 * @author  gvasil
 */
public class ConfigPanel extends ResultsPanel {
    
    /**
     * Creates new form ClassicResultsPanel
     */
    public ConfigPanel() {
        File indexDir = new File(Resources.getIndexDirPath());
        
        this.propertiesControl = PropertiesControl.getPropertiesControl();
        
        this.image_filetypes = this.propertiesControl.getImageFiletypes();
        this.document_filetypes = this.propertiesControl.getDocumentFiletypes();
        this.misc_filetypes = this.propertiesControl.getMiscFiletypes();
        this.music_filetypes = this.propertiesControl.getMusicFiletypes();
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        saveButton = new javax.swing.JButton();
        jpegCheck = new java.awt.Checkbox();
        gifCheck = new java.awt.Checkbox();
        pngCheck = new java.awt.Checkbox();
        txtCheck = new java.awt.Checkbox();
        pdfCheck = new java.awt.Checkbox();
        docCheck = new java.awt.Checkbox();
        rtfCheck = new java.awt.Checkbox();
        htmlCheck = new java.awt.Checkbox();
        xlsCheck = new java.awt.Checkbox();
        pptCheck = new java.awt.Checkbox();
        mp3Check = new java.awt.Checkbox();
        label1 = new java.awt.Label();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        pathField = new java.awt.TextField();
        label8 = new java.awt.Label();
        revertButton = new javax.swing.JButton();
        pathButton = new javax.swing.JButton();
        label9 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lastIndexedLabel = new javax.swing.JLabel();
        lastOptimizedLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        saveButton.setText("Save");
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });

        jpegCheck.setLabel("jpeg");
        if (this.image_filetypes.contains(new StringBuffer("jpg")) && this.image_filetypes.contains(new StringBuffer("jpeg"))) {
            this.jpegCheck.setState(true);
        }

        gifCheck.setLabel("gif");
        if (this.image_filetypes.contains(new StringBuffer("gif"))) {
            this.gifCheck.setState(true);
        }

        pngCheck.setLabel("png");
        if (this.image_filetypes.contains(new StringBuffer("png"))) {
            this.pngCheck.setState(true);
        }

        txtCheck.setLabel("txt");
        if (this.document_filetypes.contains(new StringBuffer("txt"))) {     this.txtCheck.setState(true); }

        pdfCheck.setLabel("pdf");
        if (this.document_filetypes.contains(new StringBuffer("pdf"))) {     this.pdfCheck.setState(true); }

        docCheck.setLabel("doc");
        if (this.document_filetypes.contains(new StringBuffer("doc"))) {     this.docCheck.setState(true); }

        rtfCheck.setLabel("rtf");
        if (this.document_filetypes.contains(new StringBuffer("rtf"))) {     this.rtfCheck.setState(true); }

        htmlCheck.setLabel("html");
        if (this.document_filetypes.contains(new StringBuffer("html")) && this.document_filetypes.contains(new StringBuffer("htm"))) {
            this.htmlCheck.setState(true);
        }

        xlsCheck.setLabel("xls");
        if (this.document_filetypes.contains(new StringBuffer("xls"))) {
            this.xlsCheck.setState(true);
        }

        pptCheck.setLabel("ppt");
        if (this.document_filetypes.contains(new StringBuffer("ppt"))) {
            this.pptCheck.setState(true);
        }

        mp3Check.setLabel("mp3");
        if (this.music_filetypes.contains(new StringBuffer("mp3"))) {
            this.mp3Check.setState(true);
        }

        label1.setBackground(new java.awt.Color(102, 102, 255));
        label1.setFont(new java.awt.Font("Tahoma", 1, 14));
        label1.setForeground(java.awt.Color.white);
        label1.setText("Indexing Folders");

        label5.setBackground(new java.awt.Color(102, 102, 255));
        label5.setFont(new java.awt.Font("Dialog", 1, 14));
        label5.setForeground(java.awt.Color.white);
        label5.setText("Path");

        label6.setBackground(new java.awt.Color(102, 102, 255));
        label6.setFont(new java.awt.Font("Tahoma", 1, 14));
        label6.setForeground(java.awt.Color.white);
        label6.setText("Filetypes");

        label7.setBackground(new java.awt.Color(102, 102, 255));
        label7.setFont(new java.awt.Font("Tahoma", 1, 14));
        label7.setForeground(java.awt.Color.white);
        label7.setText("Index Information");

        pathField.setText(this.propertiesControl.getPath());

        label8.setFont(new java.awt.Font("SansSerif", 1, 12));
        label8.setText("Path:");

        revertButton.setText("Revert");

        pathButton.setText("...");
        pathButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pathButtonMouseClicked(evt);
            }
        });

        label9.setBackground(new java.awt.Color(102, 102, 255));
        label9.setFont(new java.awt.Font("Tahoma", 1, 14));
        label9.setForeground(java.awt.Color.white);
        label9.setText("Actions");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 12));
        jLabel1.setText("Last indexed:");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12));
        jLabel2.setText("Last Optimized:");

        lastIndexedLabel.setFont(new java.awt.Font("SansSerif", 0, 12));
        lastIndexedLabel.setText(((this.propertiesControl.getLastIndexed() == 0) ? "Never" : DateFormat.getDateInstance().format(this.propertiesControl.getLastIndexedDate())));

        lastOptimizedLabel.setFont(new java.awt.Font("SansSerif", 0, 12));
        lastOptimizedLabel.setText(((this.propertiesControl.getLastOptimized() == 0) ? "Never" : DateFormat.getDateInstance().format(this.propertiesControl.getLastOptimizedDate())));

        jButton1.setText("Force indexing");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(label6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpegCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(xlsCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(txtCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pdfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pptCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rtfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(10, 10, 10)
                        .add(docCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(htmlCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(gifCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pngCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(mp3Check, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(359, Short.MAX_VALUE))
            .add(label7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, label1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(label8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pathField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pathButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(lastIndexedLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(lastOptimizedLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(238, Short.MAX_VALUE))
            .add(label9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .add(revertButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(saveButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .add(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pathButton)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(pathField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(label8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(15, 15, 15)
                .add(label6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpegCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(gifCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pngCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(xlsCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mp3Check, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(txtCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pptCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rtfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(docCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(htmlCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pdfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(label7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lastIndexedLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(lastOptimizedLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(label9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(saveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(revertButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pathButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathButtonMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = pathField.getText();
            if (path.lastIndexOf(File.pathSeparator) != path.length() - 1) {
                path += File.pathSeparator;
            }
            pathField.setText(path + chooser.getSelectedFile() +File.pathSeparator);
        }
    }//GEN-LAST:event_pathButtonMouseClicked


    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        File dataDir = null, indexDir = null;
        File[] dataDirsFile = null;
        
        /* <Save properties> */
        image_filetypes = "";
        document_filetypes = "";
        misc_filetypes = "";
        music_filetypes = "";
        
        if (this.jpegCheck.getState())
            image_filetypes += "jpeg,jpg,";
        if (this.pngCheck.getState())
            image_filetypes += "png,";
        if (this.gifCheck.getState())
            image_filetypes += "gif,";
        
        if (this.txtCheck.getState())
            document_filetypes += "txt,";
        if (this.pdfCheck.getState())
            document_filetypes += "pdf,";
        if (this.docCheck.getState())
            document_filetypes += "doc,";
        if (this.rtfCheck.getState())
            document_filetypes += "rtf,";
        if (this.htmlCheck.getState())
            document_filetypes += "html,htm,";
        if (this.xlsCheck.getState())
            document_filetypes += "xls,";
        if (this.pptCheck.getState())
            document_filetypes += "ppt,";
        
        if (this.mp3Check.getState())
            music_filetypes += "mp3,";
        
        if (image_filetypes.lastIndexOf(',') != -1) {
            image_filetypes = image_filetypes.substring(0, image_filetypes.lastIndexOf(','));
        }
        
        if (document_filetypes.lastIndexOf(',') != -1) {
            document_filetypes = document_filetypes.substring(0, document_filetypes.lastIndexOf(','));
        }
        
        if (misc_filetypes.lastIndexOf(',') != -1) {
            misc_filetypes = misc_filetypes.substring(0, misc_filetypes.lastIndexOf(','));
        }
        
        if (music_filetypes.lastIndexOf(',') != -1) {
            music_filetypes = music_filetypes.substring(0, music_filetypes.lastIndexOf(','));
        }
        
        this.propertiesControl.setImageFiletypes(image_filetypes);
        this.propertiesControl.setDocumentFiletypes(document_filetypes);
        this.propertiesControl.setMiscFiletypes(misc_filetypes);
        this.propertiesControl.setMusicFiletypes(music_filetypes);
        
        String path = this.pathField.getText().trim();
        
        if (path.length() == 0) {
            JOptionPane.showMessageDialog(this, "Path is empty",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String spl[] = path.split(File.pathSeparator);
        path = "";
        for (int i=0; i < spl.length; i++) {
            File f = new File(spl[i]);
            if (f.isDirectory() == false || f.exists() == false) {
                JOptionPane.showMessageDialog(this, "File '" +f
                        +"' does not exists or is not a directory",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                path += f.getCanonicalPath() + File.pathSeparator;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        this.propertiesControl.setPath(this.pathField.getText());

        this.propertiesControl.flush();
    }//GEN-LAST:event_saveButtonMouseClicked
    

    
    private void executeFile(File file) {
        throw new NullPointerException("Method is not implemented.");
    }
    
    private void printCurrentHits() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    private void printHit(Document doc, int score, JLabel titleLabel, JLabel scoreLabel,
            JLabel pathLabel, JLabel sizeLabel, JLabel iconLabel) {
            throw new NullPointerException("Method is not implemented.");
    }
    
    private void printCurrentFragments() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    public void setResults(Query query, Hits hits) {
        throw new NullPointerException("Method is not implemented.");
    }
    
    public int getCurrentResultsNumber() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    public int getTotalResultsNumber() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    public boolean hasPreviousResults() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    public boolean hasNextResults() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    public boolean nextResults() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    public boolean previousResults() {
        throw new NullPointerException("Method is not implemented.");
    }
    
    private String image_filetypes = "";
    private String document_filetypes = "";
    private String misc_filetypes = "";
    private String music_filetypes = "";
    private PropertiesControl propertiesControl;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox docCheck;
    private java.awt.Checkbox gifCheck;
    private java.awt.Checkbox htmlCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.Checkbox jpegCheck;
    private java.awt.Label label1;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JLabel lastIndexedLabel;
    private javax.swing.JLabel lastOptimizedLabel;
    private java.awt.Checkbox mp3Check;
    private javax.swing.JButton pathButton;
    private java.awt.TextField pathField;
    private java.awt.Checkbox pdfCheck;
    private java.awt.Checkbox pngCheck;
    private java.awt.Checkbox pptCheck;
    private javax.swing.JButton revertButton;
    private java.awt.Checkbox rtfCheck;
    private javax.swing.JButton saveButton;
    private java.awt.Checkbox txtCheck;
    private java.awt.Checkbox xlsCheck;
    // End of variables declaration//GEN-END:variables
    
}
