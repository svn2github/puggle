/*
 * ModernResultsPanel.java
 *
 * Created on 16 Μάρτιος 2007, 8:51 μμ
 */

package puggle.ui;

import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.text.html.HTMLEditorKit;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.Query;
import puggle.LexicalAnalyzer.FileHandler;
import puggle.LexicalAnalyzer.FileHandlerException;

/**
 *
 * @author  gvasil
 */
public class ModernResultsPanel extends ResultsPanel {
    
    /**
     * Creates new form ClassicResultsPanel
     */
    public ModernResultsPanel() {
        this.imageControl = ImageControl.getImageControl();
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainPanel = new javax.swing.JPanel();
        modernResultPanel1 = new puggle.ui.ModernResultPanel();
        modernResultPanel2 = new puggle.ui.ModernResultPanel();
        modernResultPanel3 = new puggle.ui.ModernResultPanel();
        modernResultPanel4 = new puggle.ui.ModernResultPanel();
        modernResultPanel5 = new puggle.ui.ModernResultPanel();
        modernResultPanel6 = new puggle.ui.ModernResultPanel();
        modernResultPanel7 = new puggle.ui.ModernResultPanel();
        modernResultPanel8 = new puggle.ui.ModernResultPanel();
        modernResultPanel9 = new puggle.ui.ModernResultPanel();
        modernResultPanel10 = new puggle.ui.ModernResultPanel();
        modernResultPanel11 = new puggle.ui.ModernResultPanel();
        modernResultPanel12 = new puggle.ui.ModernResultPanel();
        modernResultPanel13 = new puggle.ui.ModernResultPanel();
        modernResultPanel14 = new puggle.ui.ModernResultPanel();
        modernResultPanel15 = new puggle.ui.ModernResultPanel();

        mainPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        mainPanel.setBackground(new java.awt.Color(239, 239, 231));
        mainPanel.setAlignmentX(0.0F);
        mainPanel.setAlignmentY(0.0F);
        mainPanel.setAutoscrolls(true);
        mainPanel.add(modernResultPanel1);

        mainPanel.add(modernResultPanel2);

        mainPanel.add(modernResultPanel3);

        mainPanel.add(modernResultPanel4);

        mainPanel.add(modernResultPanel5);

        mainPanel.add(modernResultPanel6);

        mainPanel.add(modernResultPanel7);

        mainPanel.add(modernResultPanel8);

        mainPanel.add(modernResultPanel9);

        mainPanel.add(modernResultPanel10);

        mainPanel.add(modernResultPanel11);

        mainPanel.add(modernResultPanel12);

        mainPanel.add(modernResultPanel13);

        mainPanel.add(modernResultPanel14);

        mainPanel.add(modernResultPanel15);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 528, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void executeFile(File file) {
        try {
            Desktop.getDesktop().open(file);
        } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE,
                        this.imageControl.getErrorIcon());
        }
    }
    
    private void printCurrentHits() {
    }
    
    private void printHit(Document doc, int score, JLabel titleLabel, JLabel scoreLabel,
            JLabel pathLabel, JLabel sizeLabel, JLabel iconLabel) {
        String title = doc.get("title");
        String path = doc.get("path");
        long size = Long.parseLong(doc.get("size"));
        if (title == null || title.trim().compareTo("") == 0) {
            title = path.substring(path.lastIndexOf(File.separatorChar) + 1);
        }
        titleLabel.setText(title);
        titleLabel.setToolTipText(path);
        scoreLabel.setIcon(this.imageControl.getStarsIcon(score));
        String folder = path.substring(0, path.lastIndexOf(File.separatorChar) + 1);
        pathLabel.setText(folder);
        pathLabel.setToolTipText(folder);
        sizeLabel.setText(Util.adjustSize(size));
        
        try {
            ImageIcon icon = FileHandler.getThumbnail(doc);
            iconLabel.setText("");
            iconLabel.setIcon(icon);
        } catch (FileHandlerException e) {
            iconLabel.setForeground(Color.RED);
            iconLabel.setText("File not found");
            iconLabel.setIcon(null);
        }
    }
    
    private void printCurrentFragments() {
    }
    
    public void setResults(Query query, Hits hits) {
        this.hits = hits;
        this.query = query;
        this.currHits = 0;
        this.totalHits = hits.length();
        this.printCurrentHits();
    }
    
    public int getCurrentResultsNumber() {
        return (this.currHits);
    }
    
    public int getTotalResultsNumber() {
        return (this.totalHits);
    }
    
    public boolean hasPreviousResults() {
        return (this.currHits - 9 >= 0);
    }
    
    public boolean hasNextResults() {
        return (this.currHits + 9 < this.totalHits);
    }
    
    public boolean nextResults() {
        if (this.hasNextResults()) {
            this.currHits += 9;
            this.printCurrentHits();
            return true;
        }
        return false;
    }
    
    public boolean previousResults() {
        if (this.hasPreviousResults()) {
            this.currHits -= 9;
            this.printCurrentHits();
            return true;
        }
        return false;
    }
    
    private ImageControl imageControl;
    private Hits hits;
    private Query query;
    
    private int currHits;
    private int totalHits;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    private puggle.ui.ModernResultPanel modernResultPanel1;
    private puggle.ui.ModernResultPanel modernResultPanel10;
    private puggle.ui.ModernResultPanel modernResultPanel11;
    private puggle.ui.ModernResultPanel modernResultPanel12;
    private puggle.ui.ModernResultPanel modernResultPanel13;
    private puggle.ui.ModernResultPanel modernResultPanel14;
    private puggle.ui.ModernResultPanel modernResultPanel15;
    private puggle.ui.ModernResultPanel modernResultPanel2;
    private puggle.ui.ModernResultPanel modernResultPanel3;
    private puggle.ui.ModernResultPanel modernResultPanel4;
    private puggle.ui.ModernResultPanel modernResultPanel5;
    private puggle.ui.ModernResultPanel modernResultPanel6;
    private puggle.ui.ModernResultPanel modernResultPanel7;
    private puggle.ui.ModernResultPanel modernResultPanel8;
    private puggle.ui.ModernResultPanel modernResultPanel9;
    // End of variables declaration//GEN-END:variables
    
}
