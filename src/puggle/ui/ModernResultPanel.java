/*
 * ResultPanel.java
 *
 * Created on 27 Απρίλιος 2007, 2:13 μμ
 */

package puggle.ui;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author  gvasil
 */
public class ModernResultPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form ResultPanel
     */
    public ModernResultPanel() {
        this.imageControl = ImageControl.getImageControl();
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        popupMenu = new javax.swing.JPopupMenu();
        menuItem = new javax.swing.JMenuItem();
        iconLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();

        menuItem.setFont(new java.awt.Font("Tahoma", 0, 10));
        menuItem.setText("Copy");
        menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });

        popupMenu.add(menuItem);

        setBackground(new java.awt.Color(255, 255, 255));
        iconLabel.setBackground(new java.awt.Color(207, 215, 227));
        iconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconLabel.setAlignmentY(0.0F);
        iconLabel.setMaximumSize(new java.awt.Dimension(100, 100));
        iconLabel.setMinimumSize(new java.awt.Dimension(10, 10));
        iconLabel.setOpaque(true);
        iconLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        iconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                iconLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                iconLabelMouseExited(evt);
            }
        });

        titleLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        titleLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        titleLabel.setPreferredSize(new java.awt.Dimension(100, 25));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(iconLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, titleLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(iconLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(titleLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemActionPerformed
        // get the system clipboard
        Clipboard systemClipboard =
                Toolkit.getDefaultToolkit().getSystemClipboard();
        // set the textual content on the clipboard to our 
        // Transferable object
        // we use the 
        //Transferable transferableText = new StringSelection(this.pathLabel.getText());
        //systemClipboard.setContents(transferableText, null);
    }//GEN-LAST:event_menuItemActionPerformed

    private void iconLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconLabelMouseExited
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_iconLabelMouseExited

    private void iconLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconLabelMouseEntered
        if (iconLabel.getIcon() != null) {
            setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_iconLabelMouseEntered

    private void iconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconLabelMouseClicked
        int button = evt.getButton();
        if (button == java.awt.event.MouseEvent.BUTTON1
                && !titleLabel.getText().equals("")) {
            try {
                this.executeFile(new File(titleLabel.getText()));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE, this.imageControl.getErrorIcon());
            }
        }
    }//GEN-LAST:event_iconLabelMouseClicked
    
    private void executeFile(File file) {
        try {
            Desktop.getDesktop().open(file);
        } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE,
                        this.imageControl.getErrorIcon());
                /*javax.swing.JTextArea t = new javax.swing.JTextArea();
                t.setText("test");
                javax.swing.JFrame fr = new javax.swing.JFrame();
                fr.add(t);
                fr.pack();
                fr.setVisible(true);*/
        }
        
        /*
        try {
            String cmd = null;
            if (file.isDirectory()) {
                cmd = "explorer \"" + file.getCanonicalPath() + "\"";
            } else {
                cmd = "cmd /c \"" + file.getCanonicalPath() + "\"";
            }
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
         */
    }
    
    public void setTitle(String title) {
        this.titleLabel.setText(title);
    }
    
    public javax.swing.JLabel getTitleLabel() {
        return this.titleLabel;
    }
    
    public void setPath(String path) {
        //this.pathLabel.setText(path);
    }
    
    public javax.swing.JLabel getPathLabel() {
        //return this.pathLabel;
        return null;
    }
    
    public void setFragment(String fragment) {
        //this.textPane1.setText(fragment);
    }
    
    public void setSize(String size) {
        //this.sizeLabel.setText(size);
    }
    
    public void setScore(Icon score) {
        //this.scoreLabel.setIcon(score);
    }
    
    public void setIcon(Icon icon) {
        this.iconLabel.setIcon(icon);
    }
    
    public javax.swing.JLabel getIconLabel() {
        return this.iconLabel;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconLabel;
    private javax.swing.JMenuItem menuItem;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private ImageControl imageControl;
    
}
