/*
 * IndexerFrame.java
 *
 * Created on 29 Ιανουάριος 2007, 6:10 μμ
 */

package puggle.ui;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import puggle.Indexer.Indexer;
import puggle.Indexer.PropertiesControl;
import puggle.Resources.Resources;

/**
 *
 * @author  gvasil
 */
public class IndexerFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form IndexerFrame
     */
    public IndexerFrame() {
        File indexDir = new File(Resources.getIndexDirPath());
        
        this.propertiesControl = PropertiesControl.getPropertiesControl();
        
        this.image_filetypes = this.propertiesControl.getImageFiletypes();
        this.document_filetypes = this.propertiesControl.getDocumentFiletypes();
        this.misc_filetypes = this.propertiesControl.getMusicFiletypes();
                
        try {
            this.indexer = new Indexer(indexDir);
        } catch (IOException ex) {
            int opt = JOptionPane.showConfirmDialog(this, "Force unlock?",
                    ex.getMessage(), JOptionPane.YES_NO_OPTION);

            if (opt == JOptionPane.YES_OPTION) {
                try {
                    this.indexer = new Indexer(indexDir, true);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(),
                            "Unspecified error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Index successfully unlocked",
                        "Report", JOptionPane.INFORMATION_MESSAGE);
            } else if (opt == JOptionPane.NO_OPTION) {
                return;
            }
        }

        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jButton1 = new javax.swing.JButton();
        label1 = new java.awt.Label();
        pathField = new java.awt.TextField();
        jpegCheck = new java.awt.Checkbox();
        gifCheck = new java.awt.Checkbox();
        pngCheck = new java.awt.Checkbox();
        txtCheck = new java.awt.Checkbox();
        pdfCheck = new java.awt.Checkbox();
        docCheck = new java.awt.Checkbox();
        rtfCheck = new java.awt.Checkbox();
        htmlCheck = new java.awt.Checkbox();
        xlsCheck = new java.awt.Checkbox();
        pptCheck = new java.awt.Checkbox();
        mp3Check = new java.awt.Checkbox();
        pathButton = new java.awt.Button();
        textArea = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        storeTextCb = new javax.swing.JCheckBox();
        storeThumbsCb = new javax.swing.JCheckBox();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Indexer");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        label1.setFont(new java.awt.Font("Dialog", 1, 12));
        label1.setText("Path:");

        pathField.setText(this.propertiesControl.getPath());

        jpegCheck.setLabel("jpeg");
        if (this.image_filetypes.contains(new StringBuffer("jpg")) && this.image_filetypes.contains(new StringBuffer("jpeg"))) {
            this.jpegCheck.setState(true);
        }

        gifCheck.setLabel("gif");
        if (this.image_filetypes.contains(new StringBuffer("gif"))) {
            this.gifCheck.setState(true);
        }

        pngCheck.setLabel("png");
        if (this.image_filetypes.contains(new StringBuffer("png"))) {
            this.pngCheck.setState(true);
        }

        txtCheck.setLabel("txt");
        if (this.document_filetypes.contains(new StringBuffer("txt"))) {     this.txtCheck.setState(true); }

        pdfCheck.setLabel("pdf");
        if (this.document_filetypes.contains(new StringBuffer("pdf"))) {     this.pdfCheck.setState(true); }

        docCheck.setLabel("doc");
        if (this.document_filetypes.contains(new StringBuffer("doc"))) {     this.docCheck.setState(true); }

        rtfCheck.setLabel("rtf");
        if (this.document_filetypes.contains(new StringBuffer("rtf"))) {     this.rtfCheck.setState(true); }

        htmlCheck.setLabel("html");
        if (this.document_filetypes.contains(new StringBuffer("html")) && this.document_filetypes.contains(new StringBuffer("htm"))) {
            this.htmlCheck.setState(true);
        }

        xlsCheck.setLabel("xls");
        if (this.document_filetypes.contains(new StringBuffer("xls"))) {
            this.xlsCheck.setState(true);
        }

        pptCheck.setLabel("ppt");
        if (this.document_filetypes.contains(new StringBuffer("ppt"))) {
            this.pptCheck.setState(true);
        }

        mp3Check.setLabel("mp3");
        if (this.misc_filetypes.contains(new StringBuffer("mp3"))) {
            this.mp3Check.setState(true);
        }

        pathButton.setActionCommand("pathButton");
        pathButton.setLabel("...");
        pathButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pathButtonMouseClicked(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 10));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.setBorder(null);
        textArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textArea.setEnabled(false);

        progressBar.setBackground(new java.awt.Color(255, 255, 255));
        progressBar.setForeground(new java.awt.Color(51, 255, 51));

        label6.setBackground(new java.awt.Color(102, 102, 255));
        label6.setFont(new java.awt.Font("Dialog", 1, 14));
        label6.setForeground(java.awt.Color.white);
        label6.setText("Filetypes");

        label7.setBackground(new java.awt.Color(102, 102, 255));
        label7.setFont(new java.awt.Font("Dialog", 1, 14));
        label7.setForeground(java.awt.Color.white);
        label7.setText("Indexing Folders");

        label8.setBackground(new java.awt.Color(102, 102, 255));
        label8.setFont(new java.awt.Font("Dialog", 1, 14));
        label8.setForeground(java.awt.Color.white);
        label8.setText("Actions");

        label9.setBackground(new java.awt.Color(102, 102, 255));
        label9.setFont(new java.awt.Font("Dialog", 1, 14));
        label9.setForeground(java.awt.Color.white);
        label9.setText("Indexing Options");

        storeTextCb.setSelected(this.propertiesControl.getStoreText());
        storeTextCb.setText("Store text");
        storeTextCb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        storeTextCb.setMargin(new java.awt.Insets(0, 0, 0, 0));

        storeThumbsCb.setSelected(this.propertiesControl.getStoreThumbnail());
        storeThumbsCb.setText("Store thumbnails");
        storeThumbsCb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        storeThumbsCb.setMargin(new java.awt.Insets(0, 0, 0, 0));

        startButton.setText("Start");
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startButtonMouseClicked(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pathField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pathButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(storeTextCb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(storeThumbsCb))
                .addContainerGap(308, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(mp3Check, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 432, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jpegCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(gifCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pdfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(docCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(14, 14, 14)
                                .add(rtfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(htmlCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(xlsCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(pptCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(pngCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 110, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(stopButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(startButton))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(textArea)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, label7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, label6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, label8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, label9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE))
                .add(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(label7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(pathButton, 0, 0, Short.MAX_VALUE)
                    .add(label1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pathField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(22, 22, 22)
                .add(label9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(storeTextCb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(storeThumbsCb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(label6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpegCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(gifCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pngCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(txtCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mp3Check, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pdfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rtfCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(docCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(xlsCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(htmlCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pptCheck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(label8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(startButton)
                    .add(stopButton))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopButtonMouseClicked
        stopButton.setEnabled(false);
        indexer.stop();
    }//GEN-LAST:event_stopButtonMouseClicked

    private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked
        File dataDir = null, indexDir = null;
        File[] dataDirsFile = null;

        /* <Save properties> */
        image_filetypes = "";
        document_filetypes = "";
        misc_filetypes = "";
        music_filetypes = "";
            
        if (this.jpegCheck.getState())
            image_filetypes += "jpeg,jpg,";
        if (this.pngCheck.getState())
            image_filetypes += "png,";
        if (this.gifCheck.getState())
            image_filetypes += "gif,";
        if (this.txtCheck.getState())
            document_filetypes += "txt,";
        if (this.pdfCheck.getState())
            document_filetypes += "pdf,";
        if (this.docCheck.getState())
            document_filetypes += "doc,";
        if (this.rtfCheck.getState())
            document_filetypes += "rtf,";
        if (this.htmlCheck.getState())
            document_filetypes += "html,htm,";
        if (this.xlsCheck.getState())
            document_filetypes += "xls,";
        if (this.xlsCheck.getState())
            document_filetypes += "ppt,";
        if (this.xlsCheck.getState())
            music_filetypes += "mp3,";
        
        if (image_filetypes.lastIndexOf(',') != -1) {
            image_filetypes = image_filetypes.substring(0, image_filetypes.lastIndexOf(','));
        }
        
        if (document_filetypes.lastIndexOf(',') != -1) {
            document_filetypes = document_filetypes.substring(0, document_filetypes.lastIndexOf(','));
        }
        
        if (misc_filetypes.lastIndexOf(',') != -1) {
            misc_filetypes = misc_filetypes.substring(0, misc_filetypes.lastIndexOf(','));
        }
        
        if (music_filetypes.lastIndexOf(',') != -1) {
            music_filetypes = music_filetypes.substring(0, music_filetypes.lastIndexOf(','));
        }
        
        this.propertiesControl.setImageFiletypes(image_filetypes);
        this.propertiesControl.setDocumentFiletypes(document_filetypes);
        this.propertiesControl.setMiscFiletypes(misc_filetypes);
        this.propertiesControl.setMusicFiletypes(music_filetypes);
        
        this.propertiesControl.setStoreText(this.storeTextCb.isSelected());
        this.propertiesControl.setStoreThumbnail(this.storeThumbsCb.isSelected());
        
        String path = this.pathField.getText().trim();
        
        if (path.length() == 0) {
            JOptionPane.showMessageDialog(this, "Path is empty",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String spl[] = path.split(File.pathSeparator);
        path = "";
        for (int i=0; i < spl.length; i++) {
            File f = new File(spl[i]);
            if (f.isDirectory() == false || f.exists() == false) {
                JOptionPane.showMessageDialog(this, "File '" +f
                        +"' does not exists or is not a directory",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                path += f.getCanonicalPath() + File.pathSeparator;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        this.propertiesControl.setPath(this.pathField.getText());
        
        this.propertiesControl.flush();

        dataDirsFile = this.propertiesControl.getDataDirectories();
        
        File logFile = null;
        PrintStream logStream = null;
        
        try {
            logFile = Resources.getLogFile();
            logStream = new PrintStream(new FileOutputStream(logFile));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Using standard output for logging.",
                    ex.getMessage(), JOptionPane.INFORMATION_MESSAGE);
            logStream = System.out;
        }

        this.indexer.setDataDirectories(dataDirsFile);
        this.indexer.setLogger(new JLogger(logStream, this.textArea));
        this.indexer.setProgressBar(this.progressBar);
        
        this.startButton.setEnabled(false); this.pathField.setEnabled(false);
        this.jpegCheck.setEnabled(false); this.gifCheck.setEnabled(false);
        this.pngCheck.setEnabled(false); this.txtCheck.setEnabled(false);
        this.docCheck.setEnabled(false); this.pdfCheck.setEnabled(false);
        this.xlsCheck.setEnabled(false); this.pptCheck.setEnabled(false);
        this.htmlCheck.setEnabled(false); this.rtfCheck.setEnabled(false);
        this.pathButton.setEnabled(false); this.mp3Check.setEnabled(false);
        this.stopButton.setEnabled(true);
        
        this.IndexerThread = new Thread(this.indexer);
        this.IndexerThread.start();

        Thread t = new Thread(
                new Runnable() {
                    public void run() {
                        try { IndexerThread.join(); indexer.optimize(); }
                        catch (InterruptedException ex) {ex.printStackTrace();}
                        catch (IOException ex) {ex.printStackTrace();}
                        
                        stopButton.setEnabled(false);
                        startButton.setEnabled(true); pathField.setEnabled(true);
                        jpegCheck.setEnabled(true); gifCheck.setEnabled(true);
                        pngCheck.setEnabled(true); txtCheck.setEnabled(true);
                        docCheck.setEnabled(true); pdfCheck.setEnabled(true);
                        xlsCheck.setEnabled(true); pptCheck.setEnabled(true);
                        htmlCheck.setEnabled(true); rtfCheck.setEnabled(true);
                        pathButton.setEnabled(true); mp3Check.setEnabled(true);
                    }
        });
        t.start();
    }//GEN-LAST:event_startButtonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (this.IndexerThread != null && (this.IndexerThread.isAlive())) {
            int opt = JOptionPane.showConfirmDialog(this,
                    "Indexing is in process. Force quit?", "Exit",
                    JOptionPane.YES_NO_OPTION);
            
            if (opt == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        this.dispose();
        this.indexer.close();
        
        System.exit(1);
    }//GEN-LAST:event_formWindowClosing

    private void pathButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathButtonMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = pathField.getText();
            if (path.lastIndexOf(File.pathSeparator) != path.length() - 1) {
                path += File.pathSeparator;
            }
            pathField.setText(path + chooser.getSelectedFile() +File.pathSeparator);
        }
    }//GEN-LAST:event_pathButtonMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IndexerFrame().setVisible(true);
            }
        });
    }
    
    private PropertiesControl propertiesControl;
    
    private Thread IndexerThread = null;
    private Indexer indexer = null;
    
    private String image_filetypes = "";
    private String document_filetypes = "";
    private String misc_filetypes = "";
    private String music_filetypes = "";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox docCheck;
    private java.awt.Checkbox gifCheck;
    private java.awt.Checkbox htmlCheck;
    private javax.swing.JButton jButton1;
    private java.awt.Checkbox jpegCheck;
    private java.awt.Label label1;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.Checkbox mp3Check;
    private java.awt.Button pathButton;
    private java.awt.TextField pathField;
    private java.awt.Checkbox pdfCheck;
    private java.awt.Checkbox pngCheck;
    private java.awt.Checkbox pptCheck;
    private javax.swing.JProgressBar progressBar;
    private java.awt.Checkbox rtfCheck;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBox storeTextCb;
    private javax.swing.JCheckBox storeThumbsCb;
    private javax.swing.JTextArea textArea;
    private java.awt.Checkbox txtCheck;
    private java.awt.Checkbox xlsCheck;
    // End of variables declaration//GEN-END:variables
    
}
