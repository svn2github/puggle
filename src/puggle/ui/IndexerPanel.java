/*
 * IndexerPanel.java
 *
 * Created on 19 Δεκέμβριος 2007, 7:57 μμ
 */

package puggle.ui;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import puggle.Indexer.Indexer;
import puggle.Indexer.PropertiesControl;
import puggle.Resources.Resources;

/**
 *
 * @author  gvasil
 */
public class IndexerPanel extends javax.swing.JPanel {
    
    /** Creates new form IndexerPanel */
    public IndexerPanel() {
        File indexDir = new File(Resources.getIndexDirPath());
        
        this.propertiesControl = PropertiesControl.getPropertiesControl();
        
        this.image_filetypes = this.propertiesControl.getImageFiletypes();
        this.document_filetypes = this.propertiesControl.getDocumentFiletypes();
        this.misc_filetypes = this.propertiesControl.getMusicFiletypes();
                
        try {
            this.indexer = new Indexer(indexDir);
        } catch (IOException ex) {
            int opt = JOptionPane.showConfirmDialog(this, "Force unlock?",
                    ex.getMessage(), JOptionPane.YES_NO_OPTION);

            if (opt == JOptionPane.YES_OPTION) {
                try {
                    this.indexer = new Indexer(indexDir, true);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(),
                            "Unspecified error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Index successfully unlocked",
                        "Report", JOptionPane.INFORMATION_MESSAGE);
            } else if (opt == JOptionPane.NO_OPTION) {
                return;
            }
        }

        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        label7 = new java.awt.Label();
        label1 = new java.awt.Label();
        pathField = new java.awt.TextField();
        textArea = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        label6 = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        storeTextCb = new javax.swing.JCheckBox();
        storeThumbsCb = new javax.swing.JCheckBox();
        jpegCheck = new javax.swing.JCheckBox();
        pngCheck = new javax.swing.JCheckBox();
        gifCheck = new javax.swing.JCheckBox();
        txtCheck = new javax.swing.JCheckBox();
        pdfCheck = new javax.swing.JCheckBox();
        docCheck = new javax.swing.JCheckBox();
        rtfCheck = new javax.swing.JCheckBox();
        htmlCheck = new javax.swing.JCheckBox();
        xlsCheck = new javax.swing.JCheckBox();
        pptCheck = new javax.swing.JCheckBox();
        mp3Check = new javax.swing.JCheckBox();
        pathButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        stopButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();

        label7.setBackground(new java.awt.Color(102, 102, 255));
        label7.setFont(new java.awt.Font("Tahoma", 1, 14));
        label7.setForeground(java.awt.Color.white);
        label7.setText("Indexing Folders");

        label1.setFont(new java.awt.Font("Dialog", 1, 12));
        label1.setText("Path:");

        pathField.setText(this.propertiesControl.getPath());

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 10));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.setBorder(null);
        textArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textArea.setEnabled(false);

        progressBar.setBackground(new java.awt.Color(255, 255, 255));
        progressBar.setForeground(new java.awt.Color(51, 255, 51));

        label6.setBackground(new java.awt.Color(102, 102, 255));
        label6.setFont(new java.awt.Font("Tahoma", 1, 14));
        label6.setForeground(java.awt.Color.white);
        label6.setText("Filetypes");

        label8.setBackground(new java.awt.Color(102, 102, 255));
        label8.setFont(new java.awt.Font("Tahoma", 1, 14));
        label8.setForeground(java.awt.Color.white);
        label8.setText("Actions");

        label9.setBackground(new java.awt.Color(102, 102, 255));
        label9.setFont(new java.awt.Font("Tahoma", 1, 14));
        label9.setForeground(java.awt.Color.white);
        label9.setText("Indexing Options");

        storeTextCb.setSelected(this.propertiesControl.getStoreText());
        storeTextCb.setText("Store text");
        storeTextCb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        storeTextCb.setMargin(new java.awt.Insets(0, 0, 0, 0));

        storeThumbsCb.setSelected(this.propertiesControl.getStoreThumbnail());
        storeThumbsCb.setText("Store thumbnails");
        storeThumbsCb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        storeThumbsCb.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jpegCheck.setText("jpeg");
        jpegCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jpegCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.image_filetypes.contains(new StringBuffer("jpg")) && this.image_filetypes.contains(new StringBuffer("jpeg"))) {
            this.jpegCheck.setSelected(true);
        }

        pngCheck.setText("png");
        pngCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pngCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.image_filetypes.contains(new StringBuffer("png"))) {
            this.pngCheck.setSelected(true);
        }

        gifCheck.setText("gif");
        gifCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gifCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.image_filetypes.contains(new StringBuffer("gif"))) {
            this.gifCheck.setSelected(true);
        }

        txtCheck.setText("txt");
        txtCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        txtCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("txt"))) {
            this.txtCheck.setSelected(true);
        }

        pdfCheck.setText("pdf");
        pdfCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pdfCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("pdf"))) {
            this.pdfCheck.setSelected(true);
        }

        docCheck.setText("doc");
        docCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        docCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("doc"))) {
            this.docCheck.setSelected(true);
        }

        rtfCheck.setText("rtf");
        rtfCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rtfCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("rtf"))) {
            this.rtfCheck.setSelected(true);
        }

        htmlCheck.setText("html");
        htmlCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        htmlCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("html")) && this.document_filetypes.contains(new StringBuffer("htm"))) {
            this.htmlCheck.setSelected(true);
        }

        xlsCheck.setText("xls");
        xlsCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        xlsCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("xls"))) {
            this.xlsCheck.setSelected(true);
        }

        pptCheck.setText("ppt");
        pptCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pptCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("ppt"))) {
            this.pptCheck.setSelected(true);
        }

        mp3Check.setText("mp3");
        mp3Check.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mp3Check.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.misc_filetypes.contains(new StringBuffer("mp3"))) {
            this.mp3Check.setSelected(true);
        }

        pathButton.setText("...");
        pathButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pathButtonMouseClicked(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopButtonMouseClicked(evt);
            }
        });

        jPanel1.add(stopButton);

        startButton.setText("Start");
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startButtonMouseClicked(evt);
            }
        });

        jPanel1.add(startButton);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(label8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
            .add(label6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
            .add(label9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
            .add(label7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(textArea)
                    .add(layout.createSequentialGroup()
                        .add(storeTextCb)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(storeThumbsCb))
                    .add(mp3Check)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jpegCheck)
                            .add(txtCheck))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pdfCheck)
                            .add(pngCheck))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(docCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rtfCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(htmlCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(xlsCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pptCheck))
                            .add(gifCheck)))
                    .add(layout.createSequentialGroup()
                        .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pathField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 375, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pathButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(41, 41, 41))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(397, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(label7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pathField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pathButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(label9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(storeTextCb)
                    .add(storeThumbsCb))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(label6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jpegCheck)
                    .add(pngCheck)
                    .add(gifCheck))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtCheck)
                    .add(pdfCheck)
                    .add(docCheck)
                    .add(rtfCheck)
                    .add(htmlCheck)
                    .add(xlsCheck)
                    .add(pptCheck))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mp3Check)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(label8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pathButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathButtonMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = pathField.getText();
            if (path.lastIndexOf(File.pathSeparator) != path.length() - 1) {
                path += File.pathSeparator;
            }
            pathField.setText(path + chooser.getSelectedFile() +File.pathSeparator);
        }
    }//GEN-LAST:event_pathButtonMouseClicked

    private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked
        File dataDir = null, indexDir = null;
        File[] dataDirsFile = null;
        
        /* <Save properties> */
        image_filetypes = "";
        document_filetypes = "";
        misc_filetypes = "";
        music_filetypes = "";
        
        if (this.jpegCheck.isSelected())
            image_filetypes += "jpeg,jpg,";
        if (this.pngCheck.isSelected())
            image_filetypes += "png,";
        if (this.gifCheck.isSelected())
            image_filetypes += "gif,";
        if (this.txtCheck.isSelected())
            document_filetypes += "txt,";
        if (this.pdfCheck.isSelected())
            document_filetypes += "pdf,";
        if (this.docCheck.isSelected())
            document_filetypes += "doc,";
        if (this.rtfCheck.isSelected())
            document_filetypes += "rtf,";
        if (this.htmlCheck.isSelected())
            document_filetypes += "html,htm,";
        if (this.xlsCheck.isSelected())
            document_filetypes += "xls,";
        if (this.xlsCheck.isSelected())
            document_filetypes += "ppt,";
        if (this.xlsCheck.isSelected())
            music_filetypes += "mp3,";
        
        if (image_filetypes.lastIndexOf(',') != -1) {
            image_filetypes = image_filetypes.substring(0, image_filetypes.lastIndexOf(','));
        }
        
        if (document_filetypes.lastIndexOf(',') != -1) {
            document_filetypes = document_filetypes.substring(0, document_filetypes.lastIndexOf(','));
        }
        
        if (misc_filetypes.lastIndexOf(',') != -1) {
            misc_filetypes = misc_filetypes.substring(0, misc_filetypes.lastIndexOf(','));
        }
        
        if (music_filetypes.lastIndexOf(',') != -1) {
            music_filetypes = music_filetypes.substring(0, music_filetypes.lastIndexOf(','));
        }
        
        this.propertiesControl.setImageFiletypes(image_filetypes);
        this.propertiesControl.setDocumentFiletypes(document_filetypes);
        this.propertiesControl.setMiscFiletypes(misc_filetypes);
        this.propertiesControl.setMusicFiletypes(music_filetypes);
        
        this.propertiesControl.setStoreText(this.storeTextCb.isSelected());
        this.propertiesControl.setStoreThumbnail(this.storeThumbsCb.isSelected());
        
        String path = this.pathField.getText().trim();
        
        if (path.length() == 0) {
            JOptionPane.showMessageDialog(this, "Path is empty",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String spl[] = path.split(File.pathSeparator);
        path = "";
        for (int i=0; i < spl.length; i++) {
            File f = new File(spl[i]);
            if (f.isDirectory() == false || f.exists() == false) {
                JOptionPane.showMessageDialog(this, "File '" +f
                        +"' does not exists or is not a directory",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                path += f.getCanonicalPath() + File.pathSeparator;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        this.propertiesControl.setPath(this.pathField.getText());
        
        this.propertiesControl.flush();
        
        dataDirsFile = this.propertiesControl.getDataDirectories();
        
        File logFile = null;
        PrintStream logStream = null;
        
        try {
            logFile = Resources.getLogFile();
            logStream = new PrintStream(new FileOutputStream(logFile));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Using standard output for logging.",
                    ex.getMessage(), JOptionPane.INFORMATION_MESSAGE);
            logStream = System.out;
        }
        
        this.indexer.setDataDirectories(dataDirsFile);
        this.indexer.setLogger(new JLogger(logStream, this.textArea));
        this.indexer.setProgressBar(this.progressBar);
        
        this.startButton.setEnabled(false); this.pathField.setEnabled(false);
        this.jpegCheck.setEnabled(false); this.gifCheck.setEnabled(false);
        this.pngCheck.setEnabled(false); this.txtCheck.setEnabled(false);
        this.docCheck.setEnabled(false); this.pdfCheck.setEnabled(false);
        this.xlsCheck.setEnabled(false); this.pptCheck.setEnabled(false);
        this.htmlCheck.setEnabled(false); this.rtfCheck.setEnabled(false);
        this.pathButton.setEnabled(false); this.mp3Check.setEnabled(false);
        storeTextCb.setEnabled(false); storeThumbsCb.setEnabled(false);
        this.stopButton.setEnabled(true);
        
        this.IndexerThread = new Thread(this.indexer);
        this.IndexerThread.start();
        
        Thread t = new Thread(
                new Runnable() {
            public void run() {
                try { IndexerThread.join(); indexer.optimize(); } catch (InterruptedException ex) {ex.printStackTrace();} catch (IOException ex) {ex.printStackTrace();}
                
                stopButton.setEnabled(false);
                startButton.setEnabled(true); pathField.setEnabled(true);
                jpegCheck.setEnabled(true); gifCheck.setEnabled(true);
                pngCheck.setEnabled(true); txtCheck.setEnabled(true);
                docCheck.setEnabled(true); pdfCheck.setEnabled(true);
                xlsCheck.setEnabled(true); pptCheck.setEnabled(true);
                htmlCheck.setEnabled(true); rtfCheck.setEnabled(true);
                pathButton.setEnabled(true); mp3Check.setEnabled(true);
                storeTextCb.setEnabled(true); storeThumbsCb.setEnabled(true);
            }
        });
        t.start();
    }//GEN-LAST:event_startButtonMouseClicked

    private void stopButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopButtonMouseClicked
        stopButton.setEnabled(false);
        indexer.stop();
    }//GEN-LAST:event_stopButtonMouseClicked
    
    /**
     * Return true if indexing is in progress
     */
    public boolean isIndexing() {
        if (this.IndexerThread != null && (this.IndexerThread.isAlive())) {
            return true;
        }
        return false;
    }
    
    public void close() {
        this.indexer.stop();
        this.indexer.close();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox docCheck;
    private javax.swing.JCheckBox gifCheck;
    private javax.swing.JCheckBox htmlCheck;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox jpegCheck;
    private java.awt.Label label1;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JCheckBox mp3Check;
    private javax.swing.JButton pathButton;
    private java.awt.TextField pathField;
    private javax.swing.JCheckBox pdfCheck;
    private javax.swing.JCheckBox pngCheck;
    private javax.swing.JCheckBox pptCheck;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JCheckBox rtfCheck;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBox storeTextCb;
    private javax.swing.JCheckBox storeThumbsCb;
    private javax.swing.JTextArea textArea;
    private javax.swing.JCheckBox txtCheck;
    private javax.swing.JCheckBox xlsCheck;
    // End of variables declaration//GEN-END:variables

    private PropertiesControl propertiesControl;
    
    private Thread IndexerThread = null;
    private Indexer indexer = null;
    
    private String image_filetypes = "";
    private String document_filetypes = "";
    private String misc_filetypes = "";
    private String music_filetypes = "";
    
}
