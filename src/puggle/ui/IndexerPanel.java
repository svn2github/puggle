/*
 * IndexerPanel.java
 *
 * Created on 19 December 2007, 7:57
 */

package puggle.ui;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import puggle.Indexer.Indexer;
import puggle.Indexer.IndexProperties;
import puggle.Resources.Resources;

/**
 *
 * @author  gvasil
 */
public class IndexerPanel extends javax.swing.JPanel {
    
    /** Creates new form IndexerPanel */
    public IndexerPanel() {

        this.init();
        initComponents();
        this.loadComponentsStatus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        textArea = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        storeTextCb = new javax.swing.JCheckBox();
        storeThumbsCb = new javax.swing.JCheckBox();
        jpegCheck = new javax.swing.JCheckBox();
        pngCheck = new javax.swing.JCheckBox();
        gifCheck = new javax.swing.JCheckBox();
        txtCheck = new javax.swing.JCheckBox();
        pdfCheck = new javax.swing.JCheckBox();
        docCheck = new javax.swing.JCheckBox();
        rtfCheck = new javax.swing.JCheckBox();
        htmlCheck = new javax.swing.JCheckBox();
        xlsCheck = new javax.swing.JCheckBox();
        pptCheck = new javax.swing.JCheckBox();
        mp3Check = new javax.swing.JCheckBox();
        mainToolBar = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        newPortableButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        indexDirectoryPanel = new javax.swing.JPanel();
        indexDirectoryLabel = new javax.swing.JLabel();
        indexTextField = new javax.swing.JTextField();
        pathPanel = new javax.swing.JPanel();
        pathLabel = new java.awt.Label();
        pathButton = new javax.swing.JButton();
        pathField = new javax.swing.JTextField();
        indexLabel = new javax.swing.JLabel();
        foldersLabel = new javax.swing.JLabel();
        optionsLabel = new javax.swing.JLabel();
        filetypesLabel = new javax.swing.JLabel();
        actionsLabel = new javax.swing.JLabel();

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 10));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.setBorder(null);
        textArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textArea.setEnabled(false);

        progressBar.setBackground(new java.awt.Color(255, 255, 255));
        progressBar.setForeground(new java.awt.Color(51, 255, 51));

        storeTextCb.setSelected(this.indexProperties.getStoreText());
        storeTextCb.setText("Store text");
        storeTextCb.setToolTipText("Store the extracted text of each file");
        storeTextCb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        storeTextCb.setMargin(new java.awt.Insets(0, 0, 0, 0));

        storeThumbsCb.setSelected(this.indexProperties.getStoreThumbnail());
        storeThumbsCb.setText("Store thumbnails");
        storeThumbsCb.setToolTipText("Store a thumbnail for each file");
        storeThumbsCb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        storeThumbsCb.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jpegCheck.setText("jpeg");
        jpegCheck.setToolTipText("Whether to index JPEG files");
        jpegCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jpegCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.image_filetypes.contains(new StringBuffer("jpg")) && this.image_filetypes.contains(new StringBuffer("jpeg"))) {
            this.jpegCheck.setSelected(true);
        }

        pngCheck.setText("png");
        pngCheck.setToolTipText("Whether to index PNG files");
        pngCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pngCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.image_filetypes.contains(new StringBuffer("png"))) {
            this.pngCheck.setSelected(true);
        }

        gifCheck.setText("gif");
        gifCheck.setToolTipText("Whether to index GIF files");
        gifCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gifCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.image_filetypes.contains(new StringBuffer("gif"))) {
            this.gifCheck.setSelected(true);
        }

        txtCheck.setText("txt");
        txtCheck.setToolTipText("Whether to index TXT files");
        txtCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        txtCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("txt"))) {
            this.txtCheck.setSelected(true);
        }

        pdfCheck.setText("pdf");
        pdfCheck.setToolTipText("Whether to index PDF files");
        pdfCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pdfCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("pdf"))) {
            this.pdfCheck.setSelected(true);
        }

        docCheck.setText("doc");
        docCheck.setToolTipText("Whether to index MS WORD files");
        docCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        docCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("doc"))) {
            this.docCheck.setSelected(true);
        }

        rtfCheck.setText("rtf");
        rtfCheck.setToolTipText("Whether to index RTF files");
        rtfCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rtfCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("rtf"))) {
            this.rtfCheck.setSelected(true);
        }

        htmlCheck.setText("html");
        htmlCheck.setToolTipText("Whether to index HTML files");
        htmlCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        htmlCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("html")) && this.document_filetypes.contains(new StringBuffer("htm"))) {
            this.htmlCheck.setSelected(true);
        }

        xlsCheck.setText("xls");
        xlsCheck.setToolTipText("Whether to index MS EXCEL files");
        xlsCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        xlsCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("xls"))) {
            this.xlsCheck.setSelected(true);
        }

        pptCheck.setText("ppt");
        pptCheck.setToolTipText("Whether to index MS POWERPOINT files");
        pptCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pptCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.document_filetypes.contains(new StringBuffer("ppt"))) {
            this.pptCheck.setSelected(true);
        }

        mp3Check.setText("mp3");
        mp3Check.setToolTipText("Whether to index MP3 files");
        mp3Check.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mp3Check.setMargin(new java.awt.Insets(0, 0, 0, 0));
        if (this.misc_filetypes.contains(new StringBuffer("mp3"))) {
            this.mp3Check.setSelected(true);
        }

        mainToolBar.setFloatable(false);
        mainToolBar.setAlignmentY(0.48387095F);
        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filenew.png")));
        newButton.setToolTipText("Create Index");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        mainToolBar.add(newButton);

        newPortableButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filenew-portable.png")));
        newPortableButton.setToolTipText("Create Portable Index");
        newPortableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPortableButtonActionPerformed(evt);
            }
        });

        mainToolBar.add(newPortableButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fileopen.png")));
        openButton.setToolTipText("Open Index");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        mainToolBar.add(openButton);

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help-about.png")));
        aboutButton.setToolTipText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        mainToolBar.add(aboutButton);

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png")));
        exitButton.setToolTipText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        mainToolBar.add(exitButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stop.png")));
        stopButton.setText("Stop");
        stopButton.setToolTipText("Stop Indexing");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/start.png")));
        startButton.setText("Start");
        startButton.setToolTipText("Start Indexing");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        indexDirectoryLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        indexDirectoryLabel.setText("Index Directory Path:");

        indexTextField.setEditable(false);
        this.indexTextField.setText(Resources.getIndexCanonicalPath());
        indexTextField.setToolTipText("Absolute path where the Index will be stored");

        org.jdesktop.layout.GroupLayout indexDirectoryPanelLayout = new org.jdesktop.layout.GroupLayout(indexDirectoryPanel);
        indexDirectoryPanel.setLayout(indexDirectoryPanelLayout);
        indexDirectoryPanelLayout.setHorizontalGroup(
            indexDirectoryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(indexDirectoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(indexDirectoryLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(indexTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addContainerGap())
        );
        indexDirectoryPanelLayout.setVerticalGroup(
            indexDirectoryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(indexDirectoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(indexDirectoryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(indexDirectoryLabel)
                    .add(indexTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pathLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        pathLabel.setText("Path:");

        pathButton.setText("...");
        pathButton.setToolTipText("Add Folder");
        pathButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pathButtonMouseClicked(evt);
            }
        });

        this.pathField.setText(this.indexProperties.getPath());
        pathField.setToolTipText("The paths that will be indexed");

        org.jdesktop.layout.GroupLayout pathPanelLayout = new org.jdesktop.layout.GroupLayout(pathPanel);
        pathPanel.setLayout(pathPanelLayout);
        pathPanelLayout.setHorizontalGroup(
            pathPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(pathLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pathField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pathButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pathPanelLayout.setVerticalGroup(
            pathPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pathPanelLayout.createSequentialGroup()
                .add(14, 14, 14)
                .add(pathPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(pathField)
                    .add(pathLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pathButton, 0, 0, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        indexLabel.setBackground(new java.awt.Color(102, 102, 255));
        indexLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        indexLabel.setForeground(new java.awt.Color(255, 255, 255));
        indexLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        indexLabel.setText("Index");
        indexLabel.setOpaque(true);

        foldersLabel.setBackground(new java.awt.Color(102, 102, 255));
        foldersLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        foldersLabel.setForeground(new java.awt.Color(255, 255, 255));
        foldersLabel.setText("Indexing Folders");
        foldersLabel.setOpaque(true);

        optionsLabel.setBackground(new java.awt.Color(102, 102, 255));
        optionsLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        optionsLabel.setForeground(new java.awt.Color(255, 255, 255));
        optionsLabel.setText("Indexing Options");
        optionsLabel.setOpaque(true);

        filetypesLabel.setBackground(new java.awt.Color(102, 102, 255));
        filetypesLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        filetypesLabel.setForeground(new java.awt.Color(255, 255, 255));
        filetypesLabel.setText("Filetypes");
        filetypesLabel.setOpaque(true);

        actionsLabel.setBackground(new java.awt.Color(102, 102, 255));
        actionsLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        actionsLabel.setForeground(new java.awt.Color(255, 255, 255));
        actionsLabel.setText("Actions");
        actionsLabel.setOpaque(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(storeTextCb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(storeThumbsCb)
                .add(461, 461, 461))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mp3Check)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jpegCheck)
                            .add(txtCheck))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pdfCheck)
                            .add(pngCheck))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(docCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rtfCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(htmlCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(xlsCheck)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pptCheck))
                            .add(gifCheck))))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(textArea)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(461, Short.MAX_VALUE)
                .add(startButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stopButton)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(actionsLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .add(filetypesLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .add(optionsLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .add(foldersLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .add(indexLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .add(mainToolBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .add(indexDirectoryPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pathPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(mainToolBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(indexLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(indexDirectoryPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(foldersLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(pathPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(optionsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(storeTextCb)
                    .add(storeThumbsCb))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filetypesLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jpegCheck)
                    .add(pngCheck)
                    .add(gifCheck))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtCheck)
                    .add(pdfCheck)
                    .add(docCheck)
                    .add(rtfCheck)
                    .add(htmlCheck)
                    .add(xlsCheck)
                    .add(pptCheck))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mp3Check)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actionsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stopButton)
                    .add(startButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        this.stopButton.setEnabled(false);
        this.indexer.stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        File dataDir = null, indexDir = null;
        File[] dataDirsFile = null;
        
        /* <Save properties> */
        image_filetypes = "";
        document_filetypes = "";
        misc_filetypes = "";
        music_filetypes = "";
        
        if (this.jpegCheck.isSelected())
            image_filetypes += "jpeg,jpg,";
        if (this.pngCheck.isSelected())
            image_filetypes += "png,";
        if (this.gifCheck.isSelected())
            image_filetypes += "gif,";
        if (this.txtCheck.isSelected())
            document_filetypes += "txt,";
        if (this.pdfCheck.isSelected())
            document_filetypes += "pdf,";
        if (this.docCheck.isSelected())
            document_filetypes += "doc,";
        if (this.rtfCheck.isSelected())
            document_filetypes += "rtf,";
        if (this.htmlCheck.isSelected())
            document_filetypes += "html,htm,";
        if (this.xlsCheck.isSelected())
            document_filetypes += "xls,";
        if (this.pptCheck.isSelected())
            document_filetypes += "ppt,";
        if (this.mp3Check.isSelected())
            music_filetypes += "mp3,";
        
        if (image_filetypes.lastIndexOf(',') != -1) {
            image_filetypes = image_filetypes.substring(0, image_filetypes.lastIndexOf(','));
        }
        
        if (document_filetypes.lastIndexOf(',') != -1) {
            document_filetypes = document_filetypes.substring(0, document_filetypes.lastIndexOf(','));
        }
        
        if (misc_filetypes.lastIndexOf(',') != -1) {
            misc_filetypes = misc_filetypes.substring(0, misc_filetypes.lastIndexOf(','));
        }
        
        if (music_filetypes.lastIndexOf(',') != -1) {
            music_filetypes = music_filetypes.substring(0, music_filetypes.lastIndexOf(','));
        }
        
        this.indexProperties.setImageFiletypes(image_filetypes);
        this.indexProperties.setDocumentFiletypes(document_filetypes);
        this.indexProperties.setMiscFiletypes(misc_filetypes);
        this.indexProperties.setMusicFiletypes(music_filetypes);
        
        this.indexProperties.setStoreText(this.storeTextCb.isSelected());
        this.indexProperties.setStoreThumbnail(this.storeThumbsCb.isSelected());
        
        String path = this.pathField.getText().trim();
        
        if (path.length() == 0) {
            JOptionPane.showMessageDialog(this, "Path is empty",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String spl[] = path.split(File.pathSeparator);
        path = "";
        for (int i=0; i < spl.length; i++) {
            File f = new File(spl[i]);
            if (f.isDirectory() == false || f.exists() == false) {
                JOptionPane.showMessageDialog(this, "File '" +f
                        +"' does not exists or is not a directory",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                path += f.getCanonicalPath() + File.pathSeparator;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        this.indexProperties.setPath(this.pathField.getText());
        
        this.indexProperties.flush();
        
        dataDirsFile = this.indexProperties.getDataDirectories();
        
        File logFile = null;
        PrintStream logStream = null;
        
        try {
            logFile = Resources.getLogFile();
            logStream = new PrintStream(new FileOutputStream(logFile));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Using standard output for logging.",
                    ex.getMessage(), JOptionPane.INFORMATION_MESSAGE);
            logStream = System.out;
        }
        
        indexDir = new File(Resources.getIndexCanonicalPath());
        try {
            this.indexer = new Indexer(indexDir, this.indexProperties);
        } catch (IOException ex) {
            int opt = JOptionPane.showConfirmDialog(this, "Force unlock?",
                    ex.getMessage(), JOptionPane.YES_NO_OPTION);

            if (opt == JOptionPane.YES_OPTION) {
                try {
                    this.indexer = new Indexer(indexDir, this.indexProperties, true);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(),
                            "Unspecified error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Index successfully unlocked",
                        "Report", JOptionPane.INFORMATION_MESSAGE);
            } else if (opt == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        this.indexer.setDataDirectories(dataDirsFile);
        this.indexer.setLogger(new JLogger(logStream, this.textArea));
        this.indexer.setProgressBar(this.progressBar);
        
        this.startButton.setEnabled(false); this.pathField.setEnabled(false);
        this.jpegCheck.setEnabled(false); this.gifCheck.setEnabled(false);
        this.pngCheck.setEnabled(false); this.txtCheck.setEnabled(false);
        this.docCheck.setEnabled(false); this.pdfCheck.setEnabled(false);
        this.xlsCheck.setEnabled(false); this.pptCheck.setEnabled(false);
        this.htmlCheck.setEnabled(false); this.rtfCheck.setEnabled(false);
        this.pathButton.setEnabled(false); this.mp3Check.setEnabled(false);
        storeTextCb.setEnabled(false); storeThumbsCb.setEnabled(false);
        this.newButton.setEnabled(false); this.openButton.setEnabled(false);
        this.aboutButton.setEnabled(false); this.exitButton.setEnabled(false);
        this.newPortableButton.setEnabled(false);
        this.stopButton.setEnabled(true);
        
        this.IndexerThread = new Thread(this.indexer);
        this.IndexerThread.start();
        
        Thread t = new Thread(
                new Runnable() {
            public void run() {
                try { IndexerThread.join(); indexer.optimize(); indexer.close(); indexer = null;}
                catch (InterruptedException ex) {ex.printStackTrace();}
                catch (IOException ex) {ex.printStackTrace();}
                
                stopButton.setEnabled(false);
                startButton.setEnabled(true); pathField.setEnabled(true);
                jpegCheck.setEnabled(true); gifCheck.setEnabled(true);
                pngCheck.setEnabled(true); txtCheck.setEnabled(true);
                docCheck.setEnabled(true); pdfCheck.setEnabled(true);
                xlsCheck.setEnabled(true); pptCheck.setEnabled(true);
                htmlCheck.setEnabled(true); rtfCheck.setEnabled(true);
                pathButton.setEnabled(true); mp3Check.setEnabled(true);
                storeTextCb.setEnabled(true); storeThumbsCb.setEnabled(true);
                newButton.setEnabled(true); openButton.setEnabled(true);
                aboutButton.setEnabled(true); exitButton.setEnabled(true);
                newPortableButton.setEnabled(true);
            }
        });
        t.start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        String fileName = "";
        File file = null;
        
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(new java.io.File(Resources.getApplicationDirectoryCanonicalPath()));
        fc.setDialogTitle("New Index Directory");
        fc.setApproveButtonToolTipText("Create Index Directory");
        
        while(true) {
            int returnVal = fc.showDialog(this, "Create");
            
            if (returnVal == JFileChooser.CANCEL_OPTION){
                return;
            }
            else if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();
                
                try { fileName = file.getCanonicalPath(); }
                catch (IOException ex) { ex.printStackTrace(); }
                
                if (file.exists()) {
                    
                    Object[] options = {"Open Index", "Overwrite Index"};
                    int opt = JOptionPane.showOptionDialog(this,
                            "Index directory '" +fileName +"' already exists.\n"
                            +"Do you wish to open existing Index or Overwrite?\n"
                            +"(Choosing to overwrite will delete existing Index)",
                            "Error Creating Index Directory",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            null);
                    
                    if (opt == JOptionPane.NO_OPTION) {
                        if (this.deleteDir(file) == false) {
                            JOptionPane.showMessageDialog(this,
                                    "Directory '" +fileName +"' cannot be deleted.",
                                    "Error Creating Index Directory",
                                    JOptionPane.ERROR_MESSAGE,
                                    this.imageControl.getErrorIcon());
                        }
                    }
                }
                
                /* close current index */
                this.close();
                
                /* create new directory */
                try { Resources.setIndex(file); }
                catch (IOException ex) { ex.printStackTrace(); }
                
                this.indexProperties.flush();
                
                this.init();
                this.loadComponentsStatus();
                
                return;
            }
        }
    }//GEN-LAST:event_newButtonActionPerformed

    private void newPortableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPortableButtonActionPerformed
        File[] roots = File.listRoots();
        
        File root = (File)JOptionPane.showInputDialog(this,
                "Drive letter:", "Select device to index", JOptionPane.QUESTION_MESSAGE,
                this.imageControl.getQuestionIcon(), roots, new JComboBox());
        
        if (root == null) {
            return;
        }

        File index = null;
        try {
            index = new File(root.getCanonicalPath() + File.separator + ".puggle");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        if (index == null) {
            return;
        }
        else if (index.exists()) {
            Object[] options = {"Open Index", "Overwrite Index"};
            int opt = JOptionPane.showOptionDialog(this,
                    "Index directory '" +index +"' already exists.\n"
                    +"Do you wish to open existing Index or Overwrite?\n"
                    +"(Choosing to overwrite will delete existing Index)",
                    "Error Creating Index Directory",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    null);
            
            if (opt == JOptionPane.NO_OPTION) {
                if (this.deleteDir(index) == false) {
                    JOptionPane.showMessageDialog(this,
                            "Directory '" +index +"' cannot be deleted.",
                            "Error Creating Index Directory",
                            JOptionPane.ERROR_MESSAGE,
                            this.imageControl.getErrorIcon());
                    return;
                }
                
                if (index.mkdir() == false) {
                    JOptionPane.showMessageDialog(this,
                            "Cannot create directory '" +index.getAbsolutePath() +"'.",
                            "Error Creating Index Directory",
                            JOptionPane.ERROR_MESSAGE,
                            this.imageControl.getErrorIcon());
                    return;
                }
            }
        }
        


        /* close current index */
        this.close();
        
        /* create new directory */
        try { Resources.setIndex(index); }
        catch (IOException ex) { ex.printStackTrace(); }

        this.init();
        this.loadComponentsStatus();
        
        this.indexProperties.setFilesystemRoot(root.getAbsolutePath());
        this.indexProperties.setPortable(true);
        this.indexProperties.flush();
        
        this.pathField.setText(root.getAbsolutePath());
        this.pathField.setEditable(false);
        this.pathButton.setEnabled(false);
    }//GEN-LAST:event_newPortableButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.close();
        
        System.exit(1);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        AboutPanel panel = new AboutPanel();
        
        JDialog dialog = new JDialog((java.awt.Frame)null, "About", true);
        
        dialog.getContentPane().add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setResizable(false);
        dialog.setVisible(true);
    }//GEN-LAST:event_aboutButtonActionPerformed

    
    public void init() {
        this.imageControl = ImageControl.getImageControl();
        this.indexProperties = new IndexProperties(
                new File(Resources.getApplicationPropertiesCanonicalPath()));
        
        this.image_filetypes = this.indexProperties.getImageFiletypes();
        this.document_filetypes = this.indexProperties.getDocumentFiletypes();
        this.misc_filetypes = this.indexProperties.getMusicFiletypes();
    }
    
    private void loadComponentsStatus() {
        
        if (this.indexProperties.isPortable() == true) {
            this.pathField.setEditable(false);
            this.pathButton.setEnabled(false);
        }
        else {
            this.pathField.setEditable(true);
            this.pathButton.setEnabled(true);
        }
        
        this.indexTextField.setText(Resources.getIndexCanonicalPath());
        this.pathField.setText(this.indexProperties.getPath());
        
        storeTextCb.setSelected(this.indexProperties.getStoreText());
        storeThumbsCb.setSelected(this.indexProperties.getStoreThumbnail());
    
        if (this.image_filetypes.contains(new StringBuffer("jpg"))
        && this.image_filetypes.contains(new StringBuffer("jpeg"))) {
            this.jpegCheck.setSelected(true);
        } else {
            this.jpegCheck.setSelected(false);
        }
        
        if (this.image_filetypes.contains(new StringBuffer("png"))) {
            this.pngCheck.setSelected(true);
        } else {
            this.pngCheck.setSelected(false);
        }
        
        if (this.image_filetypes.contains(new StringBuffer("gif"))) {
            this.gifCheck.setSelected(true);
        } else {
            this.gifCheck.setSelected(false);
        }
        
        if (this.document_filetypes.contains(new StringBuffer("txt"))) {
            this.txtCheck.setSelected(true);
        } else {
            this.txtCheck.setSelected(false);
        }
        
        if (this.document_filetypes.contains(new StringBuffer("pdf"))) {
            this.pdfCheck.setSelected(true);
        } else {
            this.pdfCheck.setSelected(false);
        }
        
        if (this.document_filetypes.contains(new StringBuffer("doc"))) {
            this.docCheck.setSelected(true);
        } else {
            this.docCheck.setSelected(false);
        }
        
        if (this.document_filetypes.contains(new StringBuffer("rtf"))) {
            this.rtfCheck.setSelected(true);
        } else {
            this.rtfCheck.setSelected(false);
        }
        
        if (this.document_filetypes.contains(new StringBuffer("html")) && this.document_filetypes.contains(new StringBuffer("htm"))) {
            this.htmlCheck.setSelected(true);
        } else {
            this.htmlCheck.setSelected(false);
        }
        
        if (this.document_filetypes.contains(new StringBuffer("xls"))) {
            this.xlsCheck.setSelected(true);
        } else {
            this.xlsCheck.setSelected(false);
        }
        
        if (this.document_filetypes.contains(new StringBuffer("ppt"))) {
            this.pptCheck.setSelected(true);
        } else {
            this.pptCheck.setSelected(false);
        }
        
        if (this.misc_filetypes.contains(new StringBuffer("mp3"))) {
            this.mp3Check.setSelected(true);
        } else {
            this.mp3Check.setSelected(false);
        }
    }
    
    // Deletes all files and subdirectories under dir.
    // Returns true if all deletions were successful.
    // If a deletion fails, the method stops attempting to delete and returns false.
    private boolean deleteDir(File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i=0; i<children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }
    
        // The directory is now empty so delete it
        return dir.delete();
    }
    
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(new java.io.File(Resources.getApplicationDirectoryCanonicalPath()));
        fc.setDialogTitle("Select Index Directory");
        
        boolean error = true;
        while (error == true) {
            error = false;
            
            int returnVal = fc.showOpenDialog(this);
            
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();

                boolean exists = Indexer.indexExists(file);
                String directory = file.getPath();
                
                if (exists == true) {

                    /* close current index */
                    this.close();
                    
                    /* create new directory */
                    try { Resources.setIndex(file); }
                    catch (IOException ex) { ex.printStackTrace(); }
                    
                    this.init();

                    this.loadComponentsStatus();
                    
                    JOptionPane.showMessageDialog(this,
                            "Index directory '" +directory +"' successfully loaded.",
                            "Open Index Directory",
                            JOptionPane.INFORMATION_MESSAGE,
                            this.imageControl.getInfoIcon());
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Directory '" +directory +"' is not a valid index.",
                            "Error Opening Index Directory",
                            JOptionPane.ERROR_MESSAGE,
                            this.imageControl.getErrorIcon());
                    error = true;
                }
                
            } // if
            
        } // while
    }//GEN-LAST:event_openButtonActionPerformed
    
    private void pathButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathButtonMouseClicked
        if (this.pathButton.isEnabled() == false) {
            return;
        }
        
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = pathField.getText();
            if (path.lastIndexOf(File.pathSeparator) != path.length() - 1) {
                path += File.pathSeparator;
            }
            pathField.setText(path + chooser.getSelectedFile() +File.pathSeparator);
        }
    }//GEN-LAST:event_pathButtonMouseClicked
    
    /**
     * Return true if indexing is in progress
     */
    public boolean isIndexing() {
        if (this.IndexerThread != null && (this.IndexerThread.isAlive())) {
            return true;
        }
        return false;
    }
    
    public void close() {
        if (this.indexer != null) {
            this.indexer.stop();
            this.indexer.close();
        }
    }
    
    protected void finalize() throws Throwable {
        this.close();
        super.finalize();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JLabel actionsLabel;
    private javax.swing.JCheckBox docCheck;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel filetypesLabel;
    private javax.swing.JLabel foldersLabel;
    private javax.swing.JCheckBox gifCheck;
    private javax.swing.JCheckBox htmlCheck;
    private javax.swing.JLabel indexDirectoryLabel;
    private javax.swing.JPanel indexDirectoryPanel;
    private javax.swing.JLabel indexLabel;
    private javax.swing.JTextField indexTextField;
    private javax.swing.JCheckBox jpegCheck;
    private javax.swing.JToolBar mainToolBar;
    private javax.swing.JCheckBox mp3Check;
    private javax.swing.JButton newButton;
    private javax.swing.JButton newPortableButton;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel optionsLabel;
    private javax.swing.JButton pathButton;
    private javax.swing.JTextField pathField;
    private java.awt.Label pathLabel;
    private javax.swing.JPanel pathPanel;
    private javax.swing.JCheckBox pdfCheck;
    private javax.swing.JCheckBox pngCheck;
    private javax.swing.JCheckBox pptCheck;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JCheckBox rtfCheck;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBox storeTextCb;
    private javax.swing.JCheckBox storeThumbsCb;
    private javax.swing.JTextArea textArea;
    private javax.swing.JCheckBox txtCheck;
    private javax.swing.JCheckBox xlsCheck;
    // End of variables declaration//GEN-END:variables

    private IndexProperties indexProperties;
    
    private ImageControl imageControl;
    
    private Thread IndexerThread = null;
    private Indexer indexer = null;
    
    private String image_filetypes = "";
    private String document_filetypes = "";
    private String misc_filetypes = "";
    private String music_filetypes = "";
    
}
