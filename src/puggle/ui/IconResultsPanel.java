/*
 * ModernResultsPanel.java
 *
 * Created on 16 March 2007, 8:51
 */

package puggle.ui;

import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.apache.lucene.document.Document;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.Query;
import puggle.Indexer.IndexProperties;
import puggle.LexicalAnalyzer.FileHandler;
import puggle.LexicalAnalyzer.FileHandlerException;
import puggle.Util.Util;

/**
 *
 * @author  gvasil
 */
public class IconResultsPanel extends ResultsPanel {
    private IndexProperties indexProperties;
    
    /**
     * Creates new form ClassicResultsPanel
     */
    public IconResultsPanel() {
        this.imageControl = ImageControl.getImageControl();
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();

        mainScrollPane.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                mainScrollPaneResized(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(239, 239, 231));
        mainPanel.setAlignmentX(0.0F);
        mainPanel.setAlignmentY(0.0F);
        mainPanel.setAutoscrolls(true);
        mainPanel.setLayout(new java.awt.GridLayout(10, 10));
        mainScrollPane.setViewportView(mainPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mainScrollPaneResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_mainScrollPaneResized
        System.out.println("Resized");
        System.out.println(this.mainPanel.getSize().getWidth() +" " +this.mainPanel.getSize().getHeight());
        printCurrentHits();
    }//GEN-LAST:event_mainScrollPaneResized
    
    private void executeFile(File file) {
        try {
            Desktop.getDesktop().open(file);
        } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE,
                        this.imageControl.getErrorIcon());
        }
    }
    
    private void printCurrentHits() {
        Document doc;
        Icon icon;
        sun.awt.shell.ShellFolder sf;
        String title = null, path = null, folder = null;
        long size;
        int score;

        IconResultPanel resultPanel = new IconResultPanel();

        //int size_y = this.mainPanel.getHeight() / 130;
        //int size_x = this.mainPanel.getWidth() / 100;

        //mainPanel.setLayout(new java.awt.GridLayout(size_x, size_y));
        //mainScrollPane.setViewportView(mainPanel);

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if (this.currHits < this.totalHits) {
                    resultPanel = new IconResultPanel();
                    try {
                        printHit(this.hits.doc(currHits), (int) Math.ceil(this.hits.score(currHits) * 10) / 2, resultPanel);
                    } catch (IOException ex) {
                        Logger.getLogger(IconResultsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.mainPanel.add(resultPanel);
                }

                //System.out.println("x:" +size_x +"y:" +size_y);
            }
        }
        /*
        try {
            if (this.currHits < this.totalHits) {
                printHit(this.hits.doc(currHits),
                        (int)Math.ceil(this.hits.score(currHits) * 10) / 2,
                        resultPanel1);
            } else {
                clearResultPanel(resultPanel1);
            }
            
            if (this.currHits + 1 < this.totalHits) {
                printHit(this.hits.doc(currHits + 1),
                        (int)Math.ceil(this.hits.score(currHits + 1) * 10) / 2,
                        resultPanel2);
            } else {
                clearResultPanel(resultPanel2);
            }

            if (currHits + 2 < totalHits) {
                printHit(this.hits.doc(currHits + 2),
                        (int)Math.ceil(this.hits.score(currHits + 2) * 10) / 2,
                        resultPanel3);
            } else {
                clearResultPanel(resultPanel3);
            }
            
            if (currHits + 3 < totalHits) {
                printHit(this.hits.doc(currHits + 3),
                        (int)Math.ceil(this.hits.score(currHits + 3) * 10) / 2,
                        resultPanel4);
            } else {
                clearResultPanel(resultPanel4);
            }
            
            if (currHits + 4 < totalHits) {
                printHit(this.hits.doc(currHits + 4),
                        (int)Math.ceil(this.hits.score(currHits + 4) * 10) / 2,
                        resultPanel5);
            } else {
                clearResultPanel(resultPanel5);
            }
            
            if (currHits + 5 < totalHits) {
                printHit(this.hits.doc(currHits + 5),
                        (int)Math.ceil(this.hits.score(currHits + 5) * 10) / 2,
                        resultPanel6);
            } else {
                clearResultPanel(resultPanel6);
            }
            
            if (currHits + 6 < totalHits) {
                printHit(this.hits.doc(currHits + 6),
                        (int)Math.ceil(this.hits.score(currHits + 6) * 10) / 2,
                        resultPanel7);
            } else {
                clearResultPanel(resultPanel7);
            }
                
            if (currHits + 7 < totalHits) {
                printHit(this.hits.doc(currHits + 7),
                        (int)Math.ceil(this.hits.score(currHits + 7) * 10) / 2,
                        resultPanel8);
            } else {
                clearResultPanel(resultPanel8);
            }
            
            if (currHits + 8 < totalHits) {
                printHit(this.hits.doc(currHits + 8),
                        (int)Math.ceil(this.hits.score(currHits + 8) * 10) / 2,
                        resultPanel9);
            } else {
                clearResultPanel(resultPanel9);
            }
            
            if (currHits + 9 < totalHits) {
                printHit(this.hits.doc(currHits + 9),
                        (int)Math.ceil(this.hits.score(currHits + 9) * 10) / 2,
                        resultPanel10);
            } else {
                clearResultPanel(resultPanel10);
            }

//            JScrollBar bar = this.scrollPane.getVerticalScrollBar();
//            bar.setValue(bar.getMinimum());
            
            //pack();
        } catch (IOException ex) {
            ex.printStackTrace();
        }*/
    }
    
    private void printHit(Document doc, int score, IconResultPanel resultPanel) {
        String title = doc.get("title");
        String path = doc.get("path");
        long size = Long.parseLong(doc.get("size"));
        if (title == null || title.trim().compareTo("") == 0) {
            title = path.substring(path.lastIndexOf(File.separatorChar) + 1);
        }
        resultPanel.setTitle(title);
        resultPanel.getTitleLabel().setToolTipText(path);
        resultPanel.setSize(Util.adjustSize(size));

        try {
            ImageIcon icon = FileHandler.getThumbnail(doc);
            resultPanel.getIconLabel().setText("");
            resultPanel.setIcon(icon);
        } catch (FileHandlerException e) {
            resultPanel.getIconLabel().setForeground(Color.RED);
            resultPanel.getIconLabel().setText("File not found");
            resultPanel.getIconLabel().setIcon(null);
        }
    }
    
    public void clearResultPanel(IconResultPanel resultPanel) {
        resultPanel.setTitle(""); resultPanel.getTitleLabel().setToolTipText("");
        resultPanel.setIcon(null); resultPanel.setPath("");
    }
    
    private void printCurrentFragments() {
    }
    
    public void setResults(Query query, Hits hits) {
        this.hits = hits;
        this.query = query;
        this.currHits = 0;
        this.totalHits = hits.length();
        this.printCurrentHits();
    }

    @Override
    public void setResults(Query query, Hits hits, IndexProperties properties) {
        this.hits = hits;
        this.query = query;
        this.currHits = 0;
        this.totalHits = hits.length();
        this.indexProperties = properties;
        this.printCurrentHits();
    }
    
    @Override
    public int getCurrentResultsNumber() {
        return (this.currHits);
    }
    
    @Override
    public int getTotalResultsNumber() {
        return (this.totalHits);
    }
    
    @Override
    public boolean hasPreviousResults() {
        return (this.currHits - 9 >= 0);
    }
    
    @Override
    public boolean hasNextResults() {
        return (this.currHits + 9 < this.totalHits);
    }
    
    @Override
    public boolean nextResults() {
        if (this.hasNextResults()) {
            this.currHits += 9;
            this.printCurrentHits();
            return true;
        }
        return false;
    }
    
    @Override
    public boolean previousResults() {
        if (this.hasPreviousResults()) {
            this.currHits -= 9;
            this.printCurrentHits();
            return true;
        }
        return false;
    }
    
    private ImageControl imageControl;
    private Hits hits;
    private Query query;
    
    private int currHits;
    private int totalHits;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
